
mb-i2c_scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e38  08007e38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e40  08007e40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000074  08007ebc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  08007ebc  00024bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef0  00000000  00000000  0004069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00044590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00045df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255df  00000000  00000000  000474a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecb8  00000000  00000000  0006ca87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e83ad  00000000  00000000  0008b73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be4  00000000  00000000  00173b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007b68 	.word	0x08007b68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007b68 	.word	0x08007b68

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <pin2hal>:

#include "azt.h"
#include "string.h"
#include "stdlib.h"

PIN pin2hal(char *pin) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	PIN gpio;
	char bank[2];
	char num[2];
	strncpy(bank, pin, 2);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2202      	movs	r2, #2
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fe74 	bl	80072f4 <strncpy>
	strncpy(num, &pin[2], 2);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	1c99      	adds	r1, r3, #2
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2202      	movs	r2, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fe6c 	bl	80072f4 <strncpy>
	bank[2] = '\0';
 800061c:	2300      	movs	r3, #0
 800061e:	74bb      	strb	r3, [r7, #18]
	num[2] = '\0';
 8000620:	2300      	movs	r3, #0
 8000622:	73bb      	strb	r3, [r7, #14]
	// get bank
	if (strcmp(bank, "PA") == 0) {
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	496c      	ldr	r1, [pc, #432]	; (80007dc <pin2hal+0x1e8>)
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdf8 	bl	8000220 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d102      	bne.n	800063c <pin2hal+0x48>
		gpio.BANK = GPIOA;
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <pin2hal+0x1ec>)
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e05e      	b.n	80006fa <pin2hal+0x106>
	} else if (strcmp(bank, "PB") == 0) {
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4968      	ldr	r1, [pc, #416]	; (80007e4 <pin2hal+0x1f0>)
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fdec 	bl	8000220 <strcmp>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <pin2hal+0x60>
		gpio.BANK = GPIOB;
 800064e:	4b66      	ldr	r3, [pc, #408]	; (80007e8 <pin2hal+0x1f4>)
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e052      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PC") == 0) {
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4964      	ldr	r1, [pc, #400]	; (80007ec <pin2hal+0x1f8>)
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fde0 	bl	8000220 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <pin2hal+0x78>
		gpio.BANK = GPIOC;
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <pin2hal+0x1fc>)
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e046      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PD") == 0) {
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4960      	ldr	r1, [pc, #384]	; (80007f4 <pin2hal+0x200>)
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdd4 	bl	8000220 <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d102      	bne.n	8000684 <pin2hal+0x90>
		gpio.BANK = GPIOD;
 800067e:	4b5e      	ldr	r3, [pc, #376]	; (80007f8 <pin2hal+0x204>)
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e03a      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PE") == 0) {
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	495c      	ldr	r1, [pc, #368]	; (80007fc <pin2hal+0x208>)
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fdc8 	bl	8000220 <strcmp>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <pin2hal+0xa8>
		gpio.BANK = GPIOE;
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <pin2hal+0x20c>)
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e02e      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PF") == 0) {
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4958      	ldr	r1, [pc, #352]	; (8000804 <pin2hal+0x210>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fdbc 	bl	8000220 <strcmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <pin2hal+0xc0>
		gpio.BANK = GPIOF;
 80006ae:	4b56      	ldr	r3, [pc, #344]	; (8000808 <pin2hal+0x214>)
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e022      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PG") == 0) {
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4954      	ldr	r1, [pc, #336]	; (800080c <pin2hal+0x218>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdb0 	bl	8000220 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <pin2hal+0xd8>
		gpio.BANK = GPIOG;
 80006c6:	4b52      	ldr	r3, [pc, #328]	; (8000810 <pin2hal+0x21c>)
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e016      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PH") == 0) {
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4950      	ldr	r1, [pc, #320]	; (8000814 <pin2hal+0x220>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fda4 	bl	8000220 <strcmp>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d102      	bne.n	80006e4 <pin2hal+0xf0>
		gpio.BANK = GPIOH;
 80006de:	4b4e      	ldr	r3, [pc, #312]	; (8000818 <pin2hal+0x224>)
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e00a      	b.n	80006fa <pin2hal+0x106>

	} else if (strcmp(bank, "PI") == 0) {
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	494c      	ldr	r1, [pc, #304]	; (800081c <pin2hal+0x228>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd98 	bl	8000220 <strcmp>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <pin2hal+0x106>
		gpio.BANK = GPIOI;
 80006f6:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <pin2hal+0x22c>)
 80006f8:	617b      	str	r3, [r7, #20]
	}

	// get pin number
	int num_nature;
	num_nature = atoi(num);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 fc84 	bl	800700c <atoi>
 8000704:	61f8      	str	r0, [r7, #28]
	switch (num_nature) {
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d85b      	bhi.n	80007c4 <pin2hal+0x1d0>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <pin2hal+0x120>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	08000755 	.word	0x08000755
 8000718:	0800075b 	.word	0x0800075b
 800071c:	08000761 	.word	0x08000761
 8000720:	08000767 	.word	0x08000767
 8000724:	0800076d 	.word	0x0800076d
 8000728:	08000773 	.word	0x08000773
 800072c:	08000779 	.word	0x08000779
 8000730:	0800077f 	.word	0x0800077f
 8000734:	08000785 	.word	0x08000785
 8000738:	0800078d 	.word	0x0800078d
 800073c:	08000795 	.word	0x08000795
 8000740:	0800079d 	.word	0x0800079d
 8000744:	080007a5 	.word	0x080007a5
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007b5 	.word	0x080007b5
 8000750:	080007bd 	.word	0x080007bd
	case 0:
		gpio.NUM = GPIO_PIN_0;
 8000754:	2301      	movs	r3, #1
 8000756:	833b      	strh	r3, [r7, #24]
		break;
 8000758:	e034      	b.n	80007c4 <pin2hal+0x1d0>
	case 1:
		gpio.NUM = GPIO_PIN_1;
 800075a:	2302      	movs	r3, #2
 800075c:	833b      	strh	r3, [r7, #24]
		break;
 800075e:	e031      	b.n	80007c4 <pin2hal+0x1d0>
	case 2:
		gpio.NUM = GPIO_PIN_2;
 8000760:	2304      	movs	r3, #4
 8000762:	833b      	strh	r3, [r7, #24]
		break;
 8000764:	e02e      	b.n	80007c4 <pin2hal+0x1d0>
	case 3:
		gpio.NUM = GPIO_PIN_3;
 8000766:	2308      	movs	r3, #8
 8000768:	833b      	strh	r3, [r7, #24]
		break;
 800076a:	e02b      	b.n	80007c4 <pin2hal+0x1d0>
	case 4:
		gpio.NUM = GPIO_PIN_4;
 800076c:	2310      	movs	r3, #16
 800076e:	833b      	strh	r3, [r7, #24]
		break;
 8000770:	e028      	b.n	80007c4 <pin2hal+0x1d0>
	case 5:
		gpio.NUM = GPIO_PIN_5;
 8000772:	2320      	movs	r3, #32
 8000774:	833b      	strh	r3, [r7, #24]
		break;
 8000776:	e025      	b.n	80007c4 <pin2hal+0x1d0>
	case 6:
		gpio.NUM = GPIO_PIN_6;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	833b      	strh	r3, [r7, #24]
		break;
 800077c:	e022      	b.n	80007c4 <pin2hal+0x1d0>
	case 7:
		gpio.NUM = GPIO_PIN_7;
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	833b      	strh	r3, [r7, #24]
		break;
 8000782:	e01f      	b.n	80007c4 <pin2hal+0x1d0>
	case 8:
		gpio.NUM = GPIO_PIN_8;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	833b      	strh	r3, [r7, #24]
		break;
 800078a:	e01b      	b.n	80007c4 <pin2hal+0x1d0>
	case 9:
		gpio.NUM = GPIO_PIN_9;
 800078c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000790:	833b      	strh	r3, [r7, #24]
		break;
 8000792:	e017      	b.n	80007c4 <pin2hal+0x1d0>
	case 10:
		gpio.NUM = GPIO_PIN_10;
 8000794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000798:	833b      	strh	r3, [r7, #24]
		break;
 800079a:	e013      	b.n	80007c4 <pin2hal+0x1d0>
	case 11:
		gpio.NUM = GPIO_PIN_11;
 800079c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a0:	833b      	strh	r3, [r7, #24]
		break;
 80007a2:	e00f      	b.n	80007c4 <pin2hal+0x1d0>
	case 12:
		gpio.NUM = GPIO_PIN_12;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	833b      	strh	r3, [r7, #24]
		break;
 80007aa:	e00b      	b.n	80007c4 <pin2hal+0x1d0>
	case 13:
		gpio.NUM = GPIO_PIN_13;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	833b      	strh	r3, [r7, #24]
		break;
 80007b2:	e007      	b.n	80007c4 <pin2hal+0x1d0>
	case 14:
		gpio.NUM = GPIO_PIN_14;
 80007b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b8:	833b      	strh	r3, [r7, #24]
		break;
 80007ba:	e003      	b.n	80007c4 <pin2hal+0x1d0>
	case 15:
		gpio.NUM = GPIO_PIN_15;
 80007bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c0:	833b      	strh	r3, [r7, #24]
		break;
 80007c2:	bf00      	nop
	}

	// return the pin
	return gpio;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	461a      	mov	r2, r3
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08007b80 	.word	0x08007b80
 80007e0:	40020000 	.word	0x40020000
 80007e4:	08007b84 	.word	0x08007b84
 80007e8:	40020400 	.word	0x40020400
 80007ec:	08007b88 	.word	0x08007b88
 80007f0:	40020800 	.word	0x40020800
 80007f4:	08007b8c 	.word	0x08007b8c
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	08007b90 	.word	0x08007b90
 8000800:	40021000 	.word	0x40021000
 8000804:	08007b94 	.word	0x08007b94
 8000808:	40021400 	.word	0x40021400
 800080c:	08007b98 	.word	0x08007b98
 8000810:	40021800 	.word	0x40021800
 8000814:	08007b9c 	.word	0x08007b9c
 8000818:	40021c00 	.word	0x40021c00
 800081c:	08007ba0 	.word	0x08007ba0
 8000820:	40022000 	.word	0x40022000

08000824 <delay>:

// delay
void delay(uint32_t ms){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fc79 	bl	8001124 <HAL_Delay>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <togglePin>:
void digitalWrite(char *pin, uint8_t val) {
	PIN gpio_pin = pin2hal(pin);
	HAL_GPIO_WritePin(gpio_pin.BANK, gpio_pin.NUM, val);
}

void togglePin(char *pin){
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	PIN gpio_pin = pin2hal(pin);
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fed3 	bl	80005f4 <pin2hal>
	HAL_GPIO_TogglePin(gpio_pin.BANK, gpio_pin.NUM);
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	89ba      	ldrh	r2, [r7, #12]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f000 ffb2 	bl	80017be <HAL_GPIO_TogglePin>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <toggleLED>:
 */

#include <led.h>


void toggleLED(uint32_t ms){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	togglePin("PE3");
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <toggleLED+0x1c>)
 800086e:	f7ff ffe4 	bl	800083a <togglePin>
	delay(ms);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffd6 	bl	8000824 <delay>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	08007ba4 	.word	0x08007ba4

08000884 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000888:	f000 fc1f 	bl	80010ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800088c:	f000 f828 	bl	80008e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000890:	f000 f902 	bl	8000a98 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000894:	f000 f890 	bl	80009b8 <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8000898:	f000 f8ce 	bl	8000a38 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800089c:	f003 fdc4 	bl	8004428 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <main+0x44>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <main+0x48>)
 80008a6:	f003 fe29 	bl	80044fc <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <main+0x4c>)
 80008ae:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTaskLED */
	myTaskLEDHandle = osThreadNew(StartTaskLED, NULL, &myTaskLED_attributes);
 80008b0:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <main+0x50>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <main+0x54>)
 80008b6:	f003 fe21 	bl	80044fc <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <main+0x58>)
 80008be:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80008c0:	f003 fde6 	bl	8004490 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80008c4:	e7fe      	b.n	80008c4 <main+0x40>
 80008c6:	bf00      	nop
 80008c8:	08007c44 	.word	0x08007c44
 80008cc:	08000b45 	.word	0x08000b45
 80008d0:	20000160 	.word	0x20000160
 80008d4:	08007c68 	.word	0x08007c68
 80008d8:	08000b65 	.word	0x08000b65
 80008dc:	20000164 	.word	0x20000164

080008e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f006 fbca 	bl	8007088 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <SystemClock_Config+0xd0>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <SystemClock_Config+0xd0>)
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <SystemClock_Config+0xd0>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xd4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <SystemClock_Config+0xd4>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000948:	2308      	movs	r3, #8
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 800094c:	23d8      	movs	r3, #216	; 0xd8
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fa09 	bl	8001d74 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x8c>
		Error_Handler();
 8000968:	f000 f920 	bl	8000bac <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800096c:	f001 f9b2 	bl	8001cd4 <HAL_PWREx_EnableOverDrive>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9a>
		Error_Handler();
 8000976:	f000 f919 	bl	8000bac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2107      	movs	r1, #7
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fc8f 	bl	80022bc <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xc8>
		Error_Handler();
 80009a4:	f000 f902 	bl	8000bac <Error_Handler>
	}
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	; 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <MX_I2C2_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20404768;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <MX_I2C2_Init+0x7c>)
 80009c6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <MX_I2C2_Init+0x74>)
 80009f4:	f000 fefe 	bl	80017f4 <HAL_I2C_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C2_Init+0x4a>
		Error_Handler();
 80009fe:	f000 f8d5 	bl	8000bac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MX_I2C2_Init+0x74>)
 8000a06:	f001 f8cd 	bl	8001ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a10:	f000 f8cc 	bl	8000bac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000a14:	2100      	movs	r1, #0
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_I2C2_Init+0x74>)
 8000a18:	f001 f90f 	bl	8001c3a <HAL_I2CEx_ConfigDigitalFilter>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000a22:	f000 f8c3 	bl	8000bac <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000090 	.word	0x20000090
 8000a30:	40005800 	.word	0x40005800
 8000a34:	20404768 	.word	0x20404768

08000a38 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_USART3_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a7c:	f002 fc60 	bl	8003340 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000a86:	f000 f891 	bl	8000bac <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000dc 	.word	0x200000dc
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_GPIO_Init+0xa4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0xa8>)
 8000b14:	f000 fe3a 	bl	800178c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0xa8>)
 8000b30:	f000 fc90 	bl	8001454 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000

08000b44 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	// scan for i2c devices
	i2cScan(&hi2c2,&huart3);
 8000b4c:	4903      	ldr	r1, [pc, #12]	; (8000b5c <StartDefaultTask+0x18>)
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <StartDefaultTask+0x1c>)
 8000b50:	f000 fa4a 	bl	8000fe8 <i2cScan>


	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f003 fd77 	bl	8004648 <osDelay>
 8000b5a:	e7fb      	b.n	8000b54 <StartDefaultTask+0x10>
 8000b5c:	200000dc 	.word	0x200000dc
 8000b60:	20000090 	.word	0x20000090

08000b64 <StartTaskLED>:
 * @brief Function implementing the myTaskLED thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void *argument) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskLED */
	/* Infinite loop */
	for (;;) {
		if (flagLED) {
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <StartTaskLED+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <StartTaskLED+0x16>
			toggleLED(250);
 8000b74:	20fa      	movs	r0, #250	; 0xfa
 8000b76:	f7ff fe75 	bl	8000864 <toggleLED>
		}
		osDelay(1);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f003 fd64 	bl	8004648 <osDelay>
		if (flagLED) {
 8000b80:	e7f4      	b.n	8000b6c <StartTaskLED+0x8>
 8000b82:	bf00      	nop
 8000b84:	20000168 	.word	0x20000168

08000b88 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM13) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b9a:	f000 faa3 	bl	80010e4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001c00 	.word	0x40001c00

08000bac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>

08000bb6 <print>:


#include "serial.h"


HAL_StatusTypeDef print(UART_HandleTypeDef *huart, const char *msg){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(huart,(uint8_t *)msg, strlen(( char * )msg), HAL_MAX_DELAY);
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f7ff fb37 	bl	8000234 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f002 fc03 	bl	80033dc <HAL_UART_Transmit>
 8000bd6:	4603      	mov	r3, r0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <println>:

HAL_StatusTypeDef println(UART_HandleTypeDef *huart, const char *msg){
 8000be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
 8000bec:	466b      	mov	r3, sp
 8000bee:	461e      	mov	r6, r3
	char data[strlen(( char * )msg)+1];
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	f7ff fb1f 	bl	8000234 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	2300      	movs	r3, #0
 8000c02:	4688      	mov	r8, r1
 8000c04:	4699      	mov	r9, r3
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	461d      	mov	r5, r3
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	00eb      	lsls	r3, r5, #3
 8000c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c2e:	00e2      	lsls	r2, r4, #3
 8000c30:	1dcb      	adds	r3, r1, #7
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3a:	466b      	mov	r3, sp
 8000c3c:	3300      	adds	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
	sprintf(data,"%s\n",( char * )msg);
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	490b      	ldr	r1, [pc, #44]	; (8000c70 <println+0x90>)
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f006 fb35 	bl	80072b4 <siprintf>
	return HAL_UART_Transmit(huart,(uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f7ff faf2 	bl	8000234 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f002 fbbe 	bl	80033dc <HAL_UART_Transmit>
 8000c60:	4603      	mov	r3, r0
 8000c62:	46b5      	mov	sp, r6
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c6e:	bf00      	nop
 8000c70:	08007bc0 	.word	0x08007bc0

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fb13 	bl	80012dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0aa      	sub	sp, #168	; 0xa8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 f9cf 	bl	8007088 <memset>
  if(hi2c->Instance==I2C2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <HAL_I2C_MspInit+0xb4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d13c      	bne.n	8000d6e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fcf2 	bl	80026ec <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d0e:	f7ff ff4d 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_I2C_MspInit+0xbc>)
 8000d52:	f000 fb7f 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_I2C_MspInit+0xb8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	37a8      	adds	r7, #168	; 0xa8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005800 	.word	0x40005800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0aa      	sub	sp, #168	; 0xa8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f006 f96f 	bl	8007088 <memset>
  if(huart->Instance==USART3)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_UART_MspInit+0xc4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d144      	bne.n	8000e3e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fc92 	bl	80026ec <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dce:	f7ff feed 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_MspInit+0xc8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e26:	4619      	mov	r1, r3
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <HAL_UART_MspInit+0xcc>)
 8000e2a:	f000 fb13 	bl	8001454 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2027      	movs	r0, #39	; 0x27
 8000e34:	f000 fa52 	bl	80012dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e38:	2027      	movs	r0, #39	; 0x27
 8000e3a:	f000 fa6b 	bl	8001314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	37a8      	adds	r7, #168	; 0xa8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800

08000e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	202c      	movs	r0, #44	; 0x2c
 8000e6a:	f000 fa37 	bl	80012dc <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000e6e:	202c      	movs	r0, #44	; 0x2c
 8000e70:	f000 fa50 	bl	8001314 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_InitTick+0xa0>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <HAL_InitTick+0xa0>)
 8000e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0xa0>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8c:	f107 0210 	add.w	r2, r7, #16
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fbf6 	bl	8002688 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e9c:	f001 fbcc 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <HAL_InitTick+0xa4>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0c9b      	lsrs	r3, r3, #18
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_InitTick+0xa8>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_InitTick+0xac>)
 8000eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_InitTick+0xa8>)
 8000ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_InitTick+0xa8>)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_InitTick+0xa8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_InitTick+0xa8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <HAL_InitTick+0xa8>)
 8000ed6:	f001 ff53 	bl	8002d80 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d104      	bne.n	8000eea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <HAL_InitTick+0xa8>)
 8000ee2:	f001 ffaf 	bl	8002e44 <HAL_TIM_Base_Start_IT>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3730      	adds	r7, #48	; 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	40001c00 	.word	0x40001c00

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART3_IRQHandler+0x10>)
 8000f36:	f002 fae5 	bl	8003504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000dc 	.word	0x200000dc

08000f44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000f4a:	f001 fff3 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000016c 	.word	0x2000016c

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f006 f844 	bl	8007014 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20040000 	.word	0x20040000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	200001b8 	.word	0x200001b8
 8000fc0:	20004bd8 	.word	0x20004bd8

08000fc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <i2cScan>:
 */

#include "wire.h"
#include "serial.h"

void i2cScan(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	// i2c scan
	char buff[64];
	println(huart, "\nStarting the I2C Scanner...\n");
 8000ff2:	491e      	ldr	r1, [pc, #120]	; (800106c <i2cScan+0x84>)
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fdf3 	bl	8000be0 <println>
	// scan for device address from 0 to 127
	byte var, ret = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	for (var = 0; var < 127; var++) {
 8001000:	2300      	movs	r3, #0
 8001002:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001006:	e024      	b.n	8001052 <i2cScan+0x6a>
		ret = HAL_I2C_IsDeviceReady(hi2c, var << 1, 3, HAL_MAX_DELAY);
 8001008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800100c:	b29b      	uxth	r3, r3
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b299      	uxth	r1, r3
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	2203      	movs	r2, #3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 fc7b 	bl	8001914 <HAL_I2C_IsDeviceReady>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		if (ret == HAL_OK) {
 8001024:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10d      	bne.n	8001048 <i2cScan+0x60>
			sprintf(buff, "Found an i2c device at 0x%X \n", var);
 800102c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	490e      	ldr	r1, [pc, #56]	; (8001070 <i2cScan+0x88>)
 8001036:	4618      	mov	r0, r3
 8001038:	f006 f93c 	bl	80072b4 <siprintf>
			print(huart, buff);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f7ff fdb7 	bl	8000bb6 <print>
	for (var = 0; var < 127; var++) {
 8001048:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800104c:	3301      	adds	r3, #1
 800104e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001052:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001056:	2b7e      	cmp	r3, #126	; 0x7e
 8001058:	d9d6      	bls.n	8001008 <i2cScan+0x20>
		}
	}
	println(huart, "\nI2C device scanning process finished.");
 800105a:	4906      	ldr	r1, [pc, #24]	; (8001074 <i2cScan+0x8c>)
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f7ff fdbf 	bl	8000be0 <println>
	// end of i2c scan
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08007bc4 	.word	0x08007bc4
 8001070:	08007be4 	.word	0x08007be4
 8001074:	08007c04 	.word	0x08007c04

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ff8f 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f005 ffbb 	bl	8007020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fbeb 	bl	8000884 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010bc:	08007e48 	.word	0x08007e48
  ldr r2, =_sbss
 80010c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010c4:	20004bd8 	.word	0x20004bd8

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f8f9 	bl	80012c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f7ff febd 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fdcb 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200001bc 	.word	0x200001bc

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200001bc 	.word	0x200001bc

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	4313      	orrs	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0000 	.word	0x05fa0000

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff4c 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ee:	f7ff ff61 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6978      	ldr	r0, [r7, #20]
 80012fa:	f7ff ffb1 	bl	8001260 <NVIC_EncodePriority>
 80012fe:	4602      	mov	r2, r0
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff80 	bl	800120c <__NVIC_SetPriority>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff54 	bl	80011d0 <__NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800133e:	f7ff fee5 	bl	800110c <HAL_GetTick>
 8001342:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e052      	b.n	8001408 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0216 	bic.w	r2, r2, #22
 8001370:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001380:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_DMA_Abort+0x62>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	2b00      	cmp	r3, #0
 8001390:	d007      	beq.n	80013a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0208 	bic.w	r2, r2, #8
 80013a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b2:	e013      	b.n	80013dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b4:	f7ff feaa 	bl	800110c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d90c      	bls.n	80013dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e015      	b.n	8001408 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e4      	bne.n	80013b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	223f      	movs	r2, #63	; 0x3f
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d004      	beq.n	800142e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00c      	b.n	8001448 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e169      	b.n	8001748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8158 	bne.w	8001742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x56>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80b2 	beq.w	8001742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_GPIO_Init+0x30c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_GPIO_Init+0x310>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x314>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d02b      	beq.n	800167a <HAL_GPIO_Init+0x226>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x318>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d025      	beq.n	8001676 <HAL_GPIO_Init+0x222>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_GPIO_Init+0x31c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01f      	beq.n	8001672 <HAL_GPIO_Init+0x21e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_GPIO_Init+0x320>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x21a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <HAL_GPIO_Init+0x324>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x216>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_GPIO_Init+0x328>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x212>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_GPIO_Init+0x32c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_GPIO_Init+0x330>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x20a>
 800165a:	2307      	movs	r3, #7
 800165c:	e00e      	b.n	800167c <HAL_GPIO_Init+0x228>
 800165e:	2308      	movs	r3, #8
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001662:	2306      	movs	r3, #6
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x228>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x228>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x228>
 800167a:	2300      	movs	r3, #0
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800168c:	4935      	ldr	r1, [pc, #212]	; (8001764 <HAL_GPIO_Init+0x310>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x334>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a32      	ldr	r2, [pc, #200]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x334>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_GPIO_Init+0x334>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x334>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_GPIO_Init+0x334>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	f67f ae92 	bls.w	8001474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021000 	.word	0x40021000
 800177c:	40021400 	.word	0x40021400
 8001780:	40021800 	.word	0x40021800
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43d9      	mvns	r1, r3
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	400b      	ands	r3, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fa52 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	; 0x24
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e006      	b.n	800187c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800187a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d104      	bne.n	800188e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_I2C_Init+0x11c>)
 800189a:	430b      	orrs	r3, r1
 800189c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69d9      	ldr	r1, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	02008000 	.word	0x02008000

08001914 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	460b      	mov	r3, r1
 8001922:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b20      	cmp	r3, #32
 8001932:	f040 80ef 	bne.w	8001b14 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001944:	d101      	bne.n	800194a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001946:	2302      	movs	r3, #2
 8001948:	e0e5      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2C_IsDeviceReady+0x44>
 8001954:	2302      	movs	r3, #2
 8001956:	e0de      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_I2C_IsDeviceReady+0x6e>
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_I2C_IsDeviceReady+0x20c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	e004      	b.n	800198c <HAL_I2C_IsDeviceReady+0x78>
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001988:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fbbb 	bl	800110c <HAL_GetTick>
 8001996:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019c4:	e034      	b.n	8001a30 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d01a      	beq.n	8001a04 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff fb9d 	bl	800110c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <HAL_I2C_IsDeviceReady+0xd0>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10f      	bne.n	8001a04 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f043 0220 	orr.w	r2, r3, #32
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e088      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_I2C_IsDeviceReady+0x128>
 8001a36:	7fbb      	ldrb	r3, [r7, #30]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0c4      	beq.n	80019c6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d01a      	beq.n	8001a80 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2120      	movs	r1, #32
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f865 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e058      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e04a      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2120      	movs	r1, #32
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f84a 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e03d      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d118      	bne.n	8001ae4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f829 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e01c      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f63f af3d 	bhi.w	800196e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	02002000 	.word	0x02002000

08001b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	e022      	b.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d01e      	beq.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff fae5 	bl	800110c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d113      	bne.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e00f      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d0cd      	beq.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d138      	bne.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e032      	b.n	8001c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d139      	bne.n	8001cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e033      	b.n	8001cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2224      	movs	r2, #36	; 0x24
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d02:	f7ff fa03 	bl	800110c <HAL_GetTick>
 8001d06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d08:	e009      	b.n	8001d1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d0a:	f7ff f9ff 	bl	800110c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d18:	d901      	bls.n	8001d1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e022      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff f9e8 	bl	800110c <HAL_GetTick>
 8001d3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d3e:	e009      	b.n	8001d54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d40:	f7ff f9e4 	bl	800110c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d4e:	d901      	bls.n	8001d54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e007      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d60:	d1ee      	bne.n	8001d40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e291      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8087 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d98:	4b96      	ldr	r3, [pc, #600]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da4:	4b93      	ldr	r3, [pc, #588]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d112      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62>
 8001db0:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b8d      	ldr	r3, [pc, #564]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x130>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d168      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e26b      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x7a>
 8001de0:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a83      	ldr	r2, [pc, #524]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e02e      	b.n	8001e4c <HAL_RCC_OscConfig+0xd8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x9c>
 8001df6:	4b7f      	ldr	r3, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7b      	ldr	r2, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xd8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0xc0>
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a75      	ldr	r2, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd8>
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6e      	ldr	r2, [pc, #440]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f95a 	bl	800110c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f956 	bl	800110c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e21f      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xe8>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f946 	bl	800110c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f942 	bl	800110c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e20b      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x110>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d069      	beq.n	8001f86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb2:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x190>
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x17a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1df      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	493d      	ldr	r1, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e040      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d023      	beq.n	8001f54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f8f8 	bl	800110c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8f4 	bl	800110c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1bd      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
 8001f52:	e018      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f8d4 	bl	800110c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff f8d0 	bl	800110c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e199      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d038      	beq.n	8002004 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d019      	beq.n	8001fce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f8b1 	bl	800110c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff f8ad 	bl	800110c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e176      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x23a>
 8001fcc:	e01a      	b.n	8002004 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f897 	bl	800110c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7ff f893 	bl	800110c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d903      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e15c      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
 8001ff4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80a4 	beq.w	800215a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a87      	ldr	r2, [pc, #540]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203a:	4b82      	ldr	r3, [pc, #520]	; (8002244 <HAL_RCC_OscConfig+0x4d0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002046:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x4d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7e      	ldr	r2, [pc, #504]	; (8002244 <HAL_RCC_OscConfig+0x4d0>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff f85b 	bl	800110c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff f857 	bl	800110c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e120      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	4b75      	ldr	r3, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4d0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x31a>
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x376>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x33c>
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a69      	ldr	r2, [pc, #420]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a66      	ldr	r2, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x376>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x35e>
 80020b8:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a60      	ldr	r2, [pc, #384]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x376>
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a57      	ldr	r2, [pc, #348]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f80b 	bl	800110c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f807 	bl	800110c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0ce      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x386>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe fff5 	bl	800110c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fff1 	bl	800110c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a4 	beq.w	80022ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d06b      	beq.n	8002248 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d149      	bne.n	800220c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ffc2 	bl	800110c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ffbe 	bl	800110c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	4313      	orrs	r3, r2
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff92 	bl	800110c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe ff8e 	bl	800110c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e057      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x478>
 800220a:	e04f      	b.n	80022ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff78 	bl	800110c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe ff74 	bl	800110c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e03d      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x4cc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x4ac>
 800223e:	e035      	b.n	80022ac <HAL_RCC_OscConfig+0x538>
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x544>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800227e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	4965      	ldr	r1, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d040      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e073      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4936      	ldr	r1, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe feac 	bl	800110c <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fea8 	bl	800110c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e053      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d210      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 020f 	bic.w	r2, r3, #15
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1cc>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1d0>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1d4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fcf0 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	08007c8c 	.word	0x08007c8c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002498:	b090      	sub	sp, #64	; 0x40
 800249a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
 80024a0:	2300      	movs	r3, #0
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x40>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	f200 80a1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x16c>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	e09b      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_GetSysClockFreq+0x184>)
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024cc:	e09b      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ce:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_GetSysClockFreq+0x188>)
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024d2:	e098      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024de:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d028      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	627a      	str	r2, [r7, #36]	; 0x24
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024fc:	2100      	movs	r1, #0
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_GetSysClockFreq+0x188>)
 8002500:	fb03 f201 	mul.w	r2, r3, r1
 8002504:	2300      	movs	r3, #0
 8002506:	fb00 f303 	mul.w	r3, r0, r3
 800250a:	4413      	add	r3, r2
 800250c:	4a43      	ldr	r2, [pc, #268]	; (800261c <HAL_RCC_GetSysClockFreq+0x188>)
 800250e:	fba0 1202 	umull	r1, r2, r0, r2
 8002512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002514:	460a      	mov	r2, r1
 8002516:	62ba      	str	r2, [r7, #40]	; 0x28
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	4413      	add	r3, r2
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	2200      	movs	r2, #0
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	61fa      	str	r2, [r7, #28]
 8002526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800252a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800252e:	f7fd fedf 	bl	80002f0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4613      	mov	r3, r2
 8002538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253a:	e053      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	2200      	movs	r2, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	617a      	str	r2, [r7, #20]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800254e:	f04f 0b00 	mov.w	fp, #0
 8002552:	4652      	mov	r2, sl
 8002554:	465b      	mov	r3, fp
 8002556:	f04f 0000 	mov.w	r0, #0
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	0159      	lsls	r1, r3, #5
 8002560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002564:	0150      	lsls	r0, r2, #5
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	ebb2 080a 	subs.w	r8, r2, sl
 800256e:	eb63 090b 	sbc.w	r9, r3, fp
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800257e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002582:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002586:	ebb2 0408 	subs.w	r4, r2, r8
 800258a:	eb63 0509 	sbc.w	r5, r3, r9
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	00eb      	lsls	r3, r5, #3
 8002598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259c:	00e2      	lsls	r2, r4, #3
 800259e:	4614      	mov	r4, r2
 80025a0:	461d      	mov	r5, r3
 80025a2:	eb14 030a 	adds.w	r3, r4, sl
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	eb45 030b 	adc.w	r3, r5, fp
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ba:	4629      	mov	r1, r5
 80025bc:	028b      	lsls	r3, r1, #10
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c4:	4621      	mov	r1, r4
 80025c6:	028a      	lsls	r2, r1, #10
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	2200      	movs	r2, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	60fa      	str	r2, [r7, #12]
 80025d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d8:	f7fd fe8a 	bl	80002f0 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80025f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025fe:	e002      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetSysClockFreq+0x184>)
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002608:	4618      	mov	r0, r3
 800260a:	3740      	adds	r7, #64	; 0x40
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	016e3600 	.word	0x016e3600

08002620 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000000 	.word	0x20000000

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08007c9c 	.word	0x08007c9c

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	08007c9c 	.word	0x08007c9c

08002688 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	220f      	movs	r2, #15
 8002696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCC_GetClockConfig+0x60>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	601a      	str	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002710:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a64      	ldr	r2, [pc, #400]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4960      	ldr	r1, [pc, #384]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d017      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002742:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	4955      	ldr	r1, [pc, #340]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800277e:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	4946      	ldr	r1, [pc, #280]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d101      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 808b 	beq.w	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a34      	ldr	r2, [pc, #208]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fc94 	bl	800110c <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7fe fc90 	bl	800110c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2bc      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027fa:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d035      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d02e      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002846:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d114      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc58 	bl	800110c <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe fc54 	bl	800110c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e27e      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ee      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800288e:	d111      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800289e:	400b      	ands	r3, r1
 80028a0:	4901      	ldr	r1, [pc, #4]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
 80028b0:	0ffffcff 	.word	0x0ffffcff
 80028b4:	4ba4      	ldr	r3, [pc, #656]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4aa3      	ldr	r2, [pc, #652]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028be:	6093      	str	r3, [r2, #8]
 80028c0:	4ba1      	ldr	r3, [pc, #644]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	499e      	ldr	r1, [pc, #632]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028de:	4b9a      	ldr	r3, [pc, #616]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ee:	4b96      	ldr	r3, [pc, #600]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4993      	ldr	r1, [pc, #588]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290c:	4b8e      	ldr	r3, [pc, #568]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	498b      	ldr	r1, [pc, #556]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800292e:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293c:	4982      	ldr	r1, [pc, #520]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002950:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295e:	497a      	ldr	r1, [pc, #488]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002972:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f023 0203 	bic.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	4971      	ldr	r1, [pc, #452]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f023 020c 	bic.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4969      	ldr	r1, [pc, #420]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b6:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	4960      	ldr	r1, [pc, #384]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	4958      	ldr	r1, [pc, #352]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	494f      	ldr	r1, [pc, #316]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2a:	4947      	ldr	r1, [pc, #284]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	493e      	ldr	r1, [pc, #248]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a60:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4936      	ldr	r1, [pc, #216]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d011      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	492d      	ldr	r1, [pc, #180]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab2:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac0:	4921      	ldr	r1, [pc, #132]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	4919      	ldr	r1, [pc, #100]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b04:	4910      	ldr	r1, [pc, #64]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d006      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 809d 	beq.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe faee 	bl	800110c <HAL_GetTick>
 8002b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b32:	e00b      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b34:	f7fe faea 	bl	800110c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d904      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e116      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b4c:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ed      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d113      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b6c:	4b83      	ldr	r3, [pc, #524]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b72:	0e1b      	lsrs	r3, r3, #24
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	071b      	lsls	r3, r3, #28
 8002b8c:	497b      	ldr	r1, [pc, #492]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d024      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbe:	d11f      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bc0:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc6:	0f1b      	lsrs	r3, r3, #28
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	019a      	lsls	r2, r3, #6
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	071b      	lsls	r3, r3, #28
 8002be0:	4966      	ldr	r1, [pc, #408]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002be8:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bee:	f023 021f 	bic.w	r2, r3, #31
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4960      	ldr	r1, [pc, #384]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	019a      	lsls	r2, r3, #6
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	071b      	lsls	r3, r3, #28
 8002c20:	4956      	ldr	r1, [pc, #344]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c28:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa6a 	bl	800110c <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c3c:	f7fe fa66 	bl	800110c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e092      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 8088 	bne.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a45      	ldr	r2, [pc, #276]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fa4d 	bl	800110c <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c76:	f7fe fa49 	bl	800110c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e075      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c88:	4b3c      	ldr	r3, [pc, #240]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d024      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d120      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	019a      	lsls	r2, r3, #6
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4927      	ldr	r1, [pc, #156]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4920      	ldr	r1, [pc, #128]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d018      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d14:	d113      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	0e1b      	lsrs	r3, r3, #24
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	019a      	lsls	r2, r3, #6
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	4911      	ldr	r1, [pc, #68]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4a:	f7fe f9df 	bl	800110c <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d52:	f7fe f9db 	bl	800110c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e007      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d70:	d1ef      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e049      	b.n	8002e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f841 	bl	8002e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fa00 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e054      	b.n	8002f06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d01d      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	; (8002f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_TIM_Base_Start_IT+0xe0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_TIM_Base_Start_IT+0xe4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x80>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_TIM_Base_Start_IT+0xe8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d115      	bne.n	8002ef0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_TIM_Base_Start_IT+0xec>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d015      	beq.n	8002f02 <HAL_TIM_Base_Start_IT+0xbe>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d011      	beq.n	8002f02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	e008      	b.n	8002f02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40010400 	.word	0x40010400
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40001800 	.word	0x40001800
 8002f30:	00010007 	.word	0x00010007

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0202 	mvn.w	r2, #2
 8002f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f905 	bl	8003186 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8f7 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f908 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0204 	mvn.w	r2, #4
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8db 	bl	8003186 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8cd 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f8de 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0208 	mvn.w	r2, #8
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8b1 	bl	8003186 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8a3 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8b4 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b10      	cmp	r3, #16
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0210 	mvn.w	r2, #16
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2208      	movs	r2, #8
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f887 	bl	8003186 <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f879 	bl	8003172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f88a 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0201 	mvn.w	r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fd68 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f91a 	bl	8003318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d10e      	bne.n	8003112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d107      	bne.n	8003112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f90d 	bl	800332c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f838 	bl	80031ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b20      	cmp	r3, #32
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0220 	mvn.w	r2, #32
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8cd 	bl	8003304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a40      	ldr	r2, [pc, #256]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d00f      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3d      	ldr	r2, [pc, #244]	; (80032dc <TIM_Base_SetConfig+0x118>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3c      	ldr	r2, [pc, #240]	; (80032e0 <TIM_Base_SetConfig+0x11c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3b      	ldr	r2, [pc, #236]	; (80032e4 <TIM_Base_SetConfig+0x120>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d027      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <TIM_Base_SetConfig+0x118>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d023      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <TIM_Base_SetConfig+0x11c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <TIM_Base_SetConfig+0x120>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d017      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <TIM_Base_SetConfig+0x128>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <TIM_Base_SetConfig+0x12c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00f      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <TIM_Base_SetConfig+0x130>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <TIM_Base_SetConfig+0x134>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a24      	ldr	r2, [pc, #144]	; (80032fc <TIM_Base_SetConfig+0x138>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <TIM_Base_SetConfig+0x13c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0xf8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40010400 	.word	0x40010400
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	40001800 	.word	0x40001800
 80032fc:	40001c00 	.word	0x40001c00
 8003300:	40002000 	.word	0x40002000

08003304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e040      	b.n	80033d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fd0e 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fbaa 	bl	8003ad8 <UART_SetConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e022      	b.n	80033d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fe02 	bl	8003fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fe89 	bl	80040e4 <UART_CheckIdleState>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	f040 8081 	bne.w	80034f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_UART_Transmit+0x26>
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e079      	b.n	80034fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_UART_Transmit+0x38>
 8003410:	2302      	movs	r3, #2
 8003412:	e072      	b.n	80034fa <HAL_UART_Transmit+0x11e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	; 0x21
 8003428:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342a:	f7fd fe6f 	bl	800110c <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003448:	d108      	bne.n	800345c <HAL_UART_Transmit+0x80>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e003      	b.n	8003464 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800346c:	e02c      	b.n	80034c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fe66 	bl	800414a <UART_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e038      	b.n	80034fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	3302      	adds	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e007      	b.n	80034b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1cc      	bne.n	800346e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	2140      	movs	r1, #64	; 0x40
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fe33 	bl	800414a <UART_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e005      	b.n	80034fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0ba      	sub	sp, #232	; 0xe8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800352a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800352e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003532:	4013      	ands	r3, r2
 8003534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d115      	bne.n	800356c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 828f 	beq.w	8003a80 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      }
      return;
 800356a:	e289      	b.n	8003a80 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800356c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8117 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_UART_IRQHandler+0x298>)
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 810a 	beq.w	80037a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d011      	beq.n	80035c0 <HAL_UART_IRQHandler+0xbc>
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d011      	beq.n	80035f0 <HAL_UART_IRQHandler+0xec>
 80035cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2202      	movs	r2, #2
 80035de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e6:	f043 0204 	orr.w	r2, r3, #4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_UART_IRQHandler+0x11c>
 80035fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2204      	movs	r2, #4
 800360e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800362c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003652:	f043 0208 	orr.w	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800365c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <HAL_UART_IRQHandler+0x18a>
 8003668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 81f5 	beq.w	8003a84 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04f      	beq.n	8003786 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fdf3 	bl	80042d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d141      	bne.n	800377e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3308      	adds	r3, #8
 8003722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800372a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_UART_IRQHandler+0x29c>)
 8003754:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fe58 	bl	8001410 <HAL_DMA_Abort_IT>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d017      	beq.n	8003796 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003770:	4610      	mov	r0, r2
 8003772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e00f      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f998 	bl	8003aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	e00b      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f994 	bl	8003aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e007      	b.n	8003796 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f990 	bl	8003aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003794:	e176      	b.n	8003a84 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	bf00      	nop
    return;
 8003798:	e174      	b.n	8003a84 <HAL_UART_IRQHandler+0x580>
 800379a:	bf00      	nop
 800379c:	04000120 	.word	0x04000120
 80037a0:	08004399 	.word	0x08004399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 8144 	bne.w	8003a36 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 813d 	beq.w	8003a36 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8136 	beq.w	8003a36 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	f040 80b2 	bne.w	8003946 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8148 	beq.w	8003a88 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	429a      	cmp	r2, r3
 8003804:	f080 8140 	bcs.w	8003a88 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381c:	f000 8085 	beq.w	800392a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800384a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800384e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1da      	bne.n	8003820 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800388e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e1      	bne.n	800386a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fa:	f023 0310 	bic.w	r3, r3, #16
 80038fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390c:	65bb      	str	r3, [r7, #88]	; 0x58
 800390e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e4      	bne.n	80038ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fd03 	bl	8001330 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003936:	b29b      	uxth	r3, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8be 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003944:	e0a0      	b.n	8003a88 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003952:	b29b      	uxth	r3, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8092 	beq.w	8003a8c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 808d 	beq.w	8003a8c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
 8003996:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800399a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e4      	bne.n	8003972 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3308      	adds	r3, #8
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	623b      	str	r3, [r7, #32]
   return(result);
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3308      	adds	r3, #8
 80039c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039cc:	633a      	str	r2, [r7, #48]	; 0x30
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e3      	bne.n	80039a8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	617b      	str	r3, [r7, #20]
   return(result);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e4      	bne.n	80039f2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f846 	bl	8003ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a34:	e02a      	b.n	8003a8c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01c      	beq.n	8003a90 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
    }
    return;
 8003a5e:	e017      	b.n	8003a90 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_UART_IRQHandler+0x58e>
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fca3 	bl	80043c4 <UART_EndTransmit_IT>
    return;
 8003a7e:	e008      	b.n	8003a92 <HAL_UART_IRQHandler+0x58e>
      return;
 8003a80:	bf00      	nop
 8003a82:	e006      	b.n	8003a92 <HAL_UART_IRQHandler+0x58e>
    return;
 8003a84:	bf00      	nop
 8003a86:	e004      	b.n	8003a92 <HAL_UART_IRQHandler+0x58e>
      return;
 8003a88:	bf00      	nop
 8003a8a:	e002      	b.n	8003a92 <HAL_UART_IRQHandler+0x58e>
      return;
 8003a8c:	bf00      	nop
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_IRQHandler+0x58e>
    return;
 8003a90:	bf00      	nop
  }

}
 8003a92:	37e8      	adds	r7, #232	; 0xe8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4ba6      	ldr	r3, [pc, #664]	; (8003d9c <UART_SetConfig+0x2c4>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	6979      	ldr	r1, [r7, #20]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a94      	ldr	r2, [pc, #592]	; (8003da0 <UART_SetConfig+0x2c8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d120      	bne.n	8003b96 <UART_SetConfig+0xbe>
 8003b54:	4b93      	ldr	r3, [pc, #588]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d816      	bhi.n	8003b90 <UART_SetConfig+0xb8>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x90>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b85 	.word	0x08003b85
 8003b70:	08003b7f 	.word	0x08003b7f
 8003b74:	08003b8b 	.word	0x08003b8b
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e150      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e14d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b84:	2304      	movs	r3, #4
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e14a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e147      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b90:	2310      	movs	r3, #16
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e144      	b.n	8003e20 <UART_SetConfig+0x348>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a83      	ldr	r2, [pc, #524]	; (8003da8 <UART_SetConfig+0x2d0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d132      	bne.n	8003c06 <UART_SetConfig+0x12e>
 8003ba0:	4b80      	ldr	r3, [pc, #512]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d828      	bhi.n	8003c00 <UART_SetConfig+0x128>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0xdc>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003c01 	.word	0x08003c01
 8003bc0:	08003c01 	.word	0x08003c01
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003c01 	.word	0x08003c01
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c01 	.word	0x08003c01
 8003bd4:	08003bef 	.word	0x08003bef
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c01 	.word	0x08003c01
 8003be4:	08003bfb 	.word	0x08003bfb
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e118      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e115      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e112      	b.n	8003e20 <UART_SetConfig+0x348>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e10f      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e10c      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a68      	ldr	r2, [pc, #416]	; (8003dac <UART_SetConfig+0x2d4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d120      	bne.n	8003c52 <UART_SetConfig+0x17a>
 8003c10:	4b64      	ldr	r3, [pc, #400]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c1a:	2b30      	cmp	r3, #48	; 0x30
 8003c1c:	d013      	beq.n	8003c46 <UART_SetConfig+0x16e>
 8003c1e:	2b30      	cmp	r3, #48	; 0x30
 8003c20:	d814      	bhi.n	8003c4c <UART_SetConfig+0x174>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d009      	beq.n	8003c3a <UART_SetConfig+0x162>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d810      	bhi.n	8003c4c <UART_SetConfig+0x174>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <UART_SetConfig+0x15c>
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x168>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x174>
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0f2      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0ef      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0ec      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e0e9      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e0e6      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <UART_SetConfig+0x2d8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d120      	bne.n	8003c9e <UART_SetConfig+0x1c6>
 8003c5c:	4b51      	ldr	r3, [pc, #324]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c66:	2bc0      	cmp	r3, #192	; 0xc0
 8003c68:	d013      	beq.n	8003c92 <UART_SetConfig+0x1ba>
 8003c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c6c:	d814      	bhi.n	8003c98 <UART_SetConfig+0x1c0>
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d009      	beq.n	8003c86 <UART_SetConfig+0x1ae>
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d810      	bhi.n	8003c98 <UART_SetConfig+0x1c0>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x1a8>
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x1b4>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x1c0>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0cc      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0c9      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e0c6      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e0c3      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e0c0      	b.n	8003e20 <UART_SetConfig+0x348>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a44      	ldr	r2, [pc, #272]	; (8003db4 <UART_SetConfig+0x2dc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x21c>
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb6:	d017      	beq.n	8003ce8 <UART_SetConfig+0x210>
 8003cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbc:	d817      	bhi.n	8003cee <UART_SetConfig+0x216>
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d00b      	beq.n	8003cdc <UART_SetConfig+0x204>
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d811      	bhi.n	8003cee <UART_SetConfig+0x216>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <UART_SetConfig+0x1fe>
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d006      	beq.n	8003ce2 <UART_SetConfig+0x20a>
 8003cd4:	e00b      	b.n	8003cee <UART_SetConfig+0x216>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0a1      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e09e      	b.n	8003e20 <UART_SetConfig+0x348>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e09b      	b.n	8003e20 <UART_SetConfig+0x348>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e098      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e095      	b.n	8003e20 <UART_SetConfig+0x348>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <UART_SetConfig+0x2e0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d125      	bne.n	8003d4a <UART_SetConfig+0x272>
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0c:	d017      	beq.n	8003d3e <UART_SetConfig+0x266>
 8003d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x26c>
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d00b      	beq.n	8003d32 <UART_SetConfig+0x25a>
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x26c>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x254>
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x260>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x26c>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e076      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e073      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e070      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e06d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e06a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <UART_SetConfig+0x2e4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d138      	bne.n	8003dc6 <UART_SetConfig+0x2ee>
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d62:	d017      	beq.n	8003d94 <UART_SetConfig+0x2bc>
 8003d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d68:	d82a      	bhi.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6e:	d00b      	beq.n	8003d88 <UART_SetConfig+0x2b0>
 8003d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d74:	d824      	bhi.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <UART_SetConfig+0x2aa>
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	d006      	beq.n	8003d8e <UART_SetConfig+0x2b6>
 8003d80:	e01e      	b.n	8003dc0 <UART_SetConfig+0x2e8>
 8003d82:	2300      	movs	r3, #0
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e04b      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e048      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e045      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d94:	2308      	movs	r3, #8
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e042      	b.n	8003e20 <UART_SetConfig+0x348>
 8003d9a:	bf00      	nop
 8003d9c:	efff69f3 	.word	0xefff69f3
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40004c00 	.word	0x40004c00
 8003db4:	40005000 	.word	0x40005000
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	40007800 	.word	0x40007800
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e02c      	b.n	8003e20 <UART_SetConfig+0x348>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a72      	ldr	r2, [pc, #456]	; (8003f94 <UART_SetConfig+0x4bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d125      	bne.n	8003e1c <UART_SetConfig+0x344>
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <UART_SetConfig+0x4c0>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dde:	d017      	beq.n	8003e10 <UART_SetConfig+0x338>
 8003de0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de4:	d817      	bhi.n	8003e16 <UART_SetConfig+0x33e>
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d00b      	beq.n	8003e04 <UART_SetConfig+0x32c>
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d811      	bhi.n	8003e16 <UART_SetConfig+0x33e>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <UART_SetConfig+0x326>
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d006      	beq.n	8003e0a <UART_SetConfig+0x332>
 8003dfc:	e00b      	b.n	8003e16 <UART_SetConfig+0x33e>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e00d      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e04:	2302      	movs	r3, #2
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e00a      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e007      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e10:	2308      	movs	r3, #8
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e004      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e16:	2310      	movs	r3, #16
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e001      	b.n	8003e20 <UART_SetConfig+0x348>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e28:	d15b      	bne.n	8003ee2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d828      	bhi.n	8003e82 <UART_SetConfig+0x3aa>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x360>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7fe fbec 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8003e60:	61b8      	str	r0, [r7, #24]
        break;
 8003e62:	e013      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe fbfc 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8003e68:	61b8      	str	r0, [r7, #24]
        break;
 8003e6a:	e00f      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <UART_SetConfig+0x4c4>)
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e00c      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7fe fb0f 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003e76:	61b8      	str	r0, [r7, #24]
        break;
 8003e78:	e008      	b.n	8003e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	61bb      	str	r3, [r7, #24]
        break;
 8003e80:	e004      	b.n	8003e8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	77bb      	strb	r3, [r7, #30]
        break;
 8003e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d074      	beq.n	8003f7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	005a      	lsls	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d916      	bls.n	8003edc <UART_SetConfig+0x404>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d212      	bcs.n	8003edc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	89fa      	ldrh	r2, [r7, #14]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e04f      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	77bb      	strb	r3, [r7, #30]
 8003ee0:	e04c      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d828      	bhi.n	8003f3a <UART_SetConfig+0x462>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x418>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fb90 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e013      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7fe fba0 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8003f20:	61b8      	str	r0, [r7, #24]
        break;
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <UART_SetConfig+0x4c4>)
 8003f26:	61bb      	str	r3, [r7, #24]
        break;
 8003f28:	e00c      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe fab3 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003f2e:	61b8      	str	r0, [r7, #24]
        break;
 8003f30:	e008      	b.n	8003f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	61bb      	str	r3, [r7, #24]
        break;
 8003f38:	e004      	b.n	8003f44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	77bb      	strb	r3, [r7, #30]
        break;
 8003f42:	bf00      	nop
    }

    if (pclk != 0U)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	085a      	lsrs	r2, r3, #1
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d909      	bls.n	8003f78 <UART_SetConfig+0x4a0>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6a:	d205      	bcs.n	8003f78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e001      	b.n	8003f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f88:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40007c00 	.word	0x40007c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d10a      	bne.n	80040b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f4:	f7fd f80a 	bl	800110c <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d10e      	bne.n	8004126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f817 	bl	800414a <UART_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00d      	b.n	8004142 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b09c      	sub	sp, #112	; 0x70
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415a:	e0a5      	b.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	f000 80a1 	beq.w	80042a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fc ffd1 	bl	800110c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <UART_WaitOnFlagUntilTimeout+0x32>
 8004176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13e      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800418a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004190:	667b      	str	r3, [r7, #100]	; 0x64
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800419a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e6      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	663b      	str	r3, [r7, #96]	; 0x60
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3308      	adds	r3, #8
 80041cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e067      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04f      	beq.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d147      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004220:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004236:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
 8004242:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3308      	adds	r3, #8
 800425a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	613b      	str	r3, [r7, #16]
   return(result);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	66bb      	str	r3, [r7, #104]	; 0x68
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004274:	623a      	str	r2, [r7, #32]
 8004276:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	6a3a      	ldr	r2, [r7, #32]
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	61bb      	str	r3, [r7, #24]
   return(result);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e010      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f43f af4a 	beq.w	800415c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3770      	adds	r7, #112	; 0x70
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b095      	sub	sp, #84	; 0x54
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
 80042fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	61fb      	str	r3, [r7, #28]
   return(result);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	2b01      	cmp	r3, #1
 8004346:	d118      	bne.n	800437a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60bb      	str	r3, [r7, #8]
   return(result);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	613b      	str	r3, [r7, #16]
   return(result);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800438c:	bf00      	nop
 800438e:	3754      	adds	r7, #84	; 0x54
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff fb78 	bl	8003aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	613b      	str	r3, [r7, #16]
   return(result);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fb44 	bl	8003a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442e:	f3ef 8305 	mrs	r3, IPSR
 8004432:	60bb      	str	r3, [r7, #8]
  return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	607b      	str	r3, [r7, #4]
  return(result);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004446:	f3ef 8311 	mrs	r3, BASEPRI
 800444a:	603b      	str	r3, [r7, #0]
  return(result);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <osKernelInitialize+0x3a>
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <osKernelInitialize+0x64>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d103      	bne.n	8004462 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800445a:	f06f 0305 	mvn.w	r3, #5
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e00c      	b.n	800447c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <osKernelInitialize+0x64>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <osKernelInitialize+0x64>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e002      	b.n	800447c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800447c:	68fb      	ldr	r3, [r7, #12]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	200001c0 	.word	0x200001c0

08004490 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004496:	f3ef 8305 	mrs	r3, IPSR
 800449a:	60bb      	str	r3, [r7, #8]
  return(result);
 800449c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a2:	f3ef 8310 	mrs	r3, PRIMASK
 80044a6:	607b      	str	r3, [r7, #4]
  return(result);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044ae:	f3ef 8311 	mrs	r3, BASEPRI
 80044b2:	603b      	str	r3, [r7, #0]
  return(result);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <osKernelStart+0x3a>
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <osKernelStart+0x68>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d103      	bne.n	80044ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80044c2:	f06f 0305 	mvn.w	r3, #5
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e010      	b.n	80044ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <osKernelStart+0x68>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d109      	bne.n	80044e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044d2:	f7ff ffa1 	bl	8004418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <osKernelStart+0x68>)
 80044d8:	2202      	movs	r2, #2
 80044da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044dc:	f001 f8ca 	bl	8005674 <vTaskStartScheduler>
      stat = osOK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e002      	b.n	80044ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200001c0 	.word	0x200001c0

080044fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b090      	sub	sp, #64	; 0x40
 8004500:	af04      	add	r7, sp, #16
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800450c:	f3ef 8305 	mrs	r3, IPSR
 8004510:	61fb      	str	r3, [r7, #28]
  return(result);
 8004512:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 808f 	bne.w	8004638 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004526:	f3ef 8311 	mrs	r3, BASEPRI
 800452a:	617b      	str	r3, [r7, #20]
  return(result);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <osThreadNew+0x3e>
 8004532:	4b44      	ldr	r3, [pc, #272]	; (8004644 <osThreadNew+0x148>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d07e      	beq.n	8004638 <osThreadNew+0x13c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d07b      	beq.n	8004638 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004544:	2318      	movs	r3, #24
 8004546:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d045      	beq.n	80045e4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <osThreadNew+0x6a>
        name = attr->name;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <osThreadNew+0x90>
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	2b38      	cmp	r3, #56	; 0x38
 800457e:	d805      	bhi.n	800458c <osThreadNew+0x90>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <osThreadNew+0x94>
        return (NULL);
 800458c:	2300      	movs	r3, #0
 800458e:	e054      	b.n	800463a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <osThreadNew+0xca>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2bbb      	cmp	r3, #187	; 0xbb
 80045ae:	d90a      	bls.n	80045c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <osThreadNew+0xca>
        mem = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	e010      	b.n	80045e8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <osThreadNew+0xec>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d108      	bne.n	80045e8 <osThreadNew+0xec>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <osThreadNew+0xec>
          mem = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	e001      	b.n	80045e8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d110      	bne.n	8004610 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fe3f 	bl	8005288 <xTaskCreateStatic>
 800460a:	4603      	mov	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e013      	b.n	8004638 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d110      	bne.n	8004638 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	b29a      	uxth	r2, r3
 800461a:	f107 0310 	add.w	r3, r7, #16
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fe90 	bl	800534e <xTaskCreate>
 800462e:	4603      	mov	r3, r0
 8004630:	2b01      	cmp	r3, #1
 8004632:	d001      	beq.n	8004638 <osThreadNew+0x13c>
          hTask = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004638:	693b      	ldr	r3, [r7, #16]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3730      	adds	r7, #48	; 0x30
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200001c0 	.word	0x200001c0

08004648 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004650:	f3ef 8305 	mrs	r3, IPSR
 8004654:	613b      	str	r3, [r7, #16]
  return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	60fb      	str	r3, [r7, #12]
  return(result);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004668:	f3ef 8311 	mrs	r3, BASEPRI
 800466c:	60bb      	str	r3, [r7, #8]
  return(result);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <osDelay+0x3c>
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <osDelay+0x58>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d103      	bne.n	8004684 <osDelay+0x3c>
    stat = osErrorISR;
 800467c:	f06f 0305 	mvn.w	r3, #5
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e007      	b.n	8004694 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <osDelay+0x4c>
      vTaskDelay(ticks);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ffba 	bl	8005608 <vTaskDelay>
    }
  }

  return (stat);
 8004694:	697b      	ldr	r3, [r7, #20]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200001c0 	.word	0x200001c0

080046a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <vApplicationGetIdleTaskMemory+0x30>)
 80046ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	200001c4 	.word	0x200001c4
 80046d4:	20000280 	.word	0x20000280

080046d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <vApplicationGetTimerTaskMemory+0x2c>)
 80046e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a06      	ldr	r2, [pc, #24]	; (8004708 <vApplicationGetTimerTaskMemory+0x30>)
 80046ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f6:	601a      	str	r2, [r3, #0]
}
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20000480 	.word	0x20000480
 8004708:	2000053c 	.word	0x2000053c

0800470c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0208 	add.w	r2, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f103 0208 	add.w	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f103 0208 	add.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d103      	bne.n	80047ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e00c      	b.n	80047e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3308      	adds	r3, #8
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e002      	b.n	80047dc <vListInsert+0x2e>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d2f6      	bcs.n	80047d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d103      	bne.n	8004854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10c      	bne.n	80048a2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	b672      	cpsid	i
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	b662      	cpsie	i
 800489c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80048a2:	f002 f8a3 	bl	80069ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d114      	bne.n	8004922 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01a      	beq.n	8004936 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3310      	adds	r3, #16
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f95d 	bl	8005bc4 <xTaskRemoveFromEventList>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <xQueueGenericReset+0xd0>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e009      	b.n	8004936 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3310      	adds	r3, #16
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fef0 	bl	800470c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3324      	adds	r3, #36	; 0x24
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff feeb 	bl	800470c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f002 f88d 	bl	8006a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08e      	sub	sp, #56	; 0x38
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	b672      	cpsid	i
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	b662      	cpsie	i
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10c      	bne.n	8004996 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	b672      	cpsid	i
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	b662      	cpsie	i
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <xQueueGenericCreateStatic+0x5a>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <xQueueGenericCreateStatic+0x5e>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueGenericCreateStatic+0x60>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10c      	bne.n	80049c6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	b672      	cpsid	i
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	b662      	cpsie	i
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <xQueueGenericCreateStatic+0x8a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <xQueueGenericCreateStatic+0x8e>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <xQueueGenericCreateStatic+0x90>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10c      	bne.n	80049f6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	b672      	cpsid	i
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	b662      	cpsie	i
 80049f0:	61fb      	str	r3, [r7, #28]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049f6:	2350      	movs	r3, #80	; 0x50
 80049f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d00c      	beq.n	8004a1a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	b672      	cpsid	i
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	b662      	cpsie	i
 8004a14:	61bb      	str	r3, [r7, #24]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f805 	bl	8004a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3730      	adds	r7, #48	; 0x30
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	69b8      	ldr	r0, [r7, #24]
 8004a7e:	f7ff fef9 	bl	8004874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	; 0x38
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10c      	bne.n	8004aca <xQueueGenericSend+0x36>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	b672      	cpsid	i
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	b662      	cpsie	i
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <xQueueGenericSend+0x44>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xQueueGenericSend+0x48>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <xQueueGenericSend+0x4a>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <xQueueGenericSend+0x68>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	b672      	cpsid	i
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	b662      	cpsie	i
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSend+0x76>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSend+0x7a>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSend+0x7c>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10c      	bne.n	8004b2e <xQueueGenericSend+0x9a>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	b672      	cpsid	i
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	b662      	cpsie	i
 8004b28:	623b      	str	r3, [r7, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b2e:	f001 fa13 	bl	8005f58 <xTaskGetSchedulerState>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <xQueueGenericSend+0xaa>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <xQueueGenericSend+0xae>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericSend+0xb0>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10c      	bne.n	8004b62 <xQueueGenericSend+0xce>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	b672      	cpsid	i
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	b662      	cpsie	i
 8004b5c:	61fb      	str	r3, [r7, #28]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b62:	f001 ff43 	bl	80069ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <xQueueGenericSend+0xe4>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d129      	bne.n	8004bcc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7e:	f000 fa15 	bl	8004fac <prvCopyDataToQueue>
 8004b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f817 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <xQueueGenericSend+0x208>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	e00a      	b.n	8004bc4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <xQueueGenericSend+0x208>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bc4:	f001 ff46 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e063      	b.n	8004c94 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd2:	f001 ff3f 	bl	8006a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e05c      	b.n	8004c94 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f853 	bl	8005c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bee:	f001 ff31 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf2:	f000 fdb3 	bl	800575c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bf6:	f001 fef9 	bl	80069ec <vPortEnterCritical>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d103      	bne.n	8004c10 <xQueueGenericSend+0x17c>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d103      	bne.n	8004c26 <xQueueGenericSend+0x192>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c26:	f001 ff15 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c2a:	1d3a      	adds	r2, r7, #4
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 f842 	bl	8005cbc <xTaskCheckForTimeOut>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d124      	bne.n	8004c88 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c40:	f000 faac 	bl	800519c <prvIsQueueFull>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d018      	beq.n	8004c7c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 ff62 	bl	8005b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5a:	f000 fa37 	bl	80050cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c5e:	f000 fd8b 	bl	8005778 <xTaskResumeAll>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f af7c 	bne.w	8004b62 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <xQueueGenericSend+0x208>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	e772      	b.n	8004b62 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c7e:	f000 fa25 	bl	80050cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c82:	f000 fd79 	bl	8005778 <xTaskResumeAll>
 8004c86:	e76c      	b.n	8004b62 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8a:	f000 fa1f 	bl	80050cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c8e:	f000 fd73 	bl	8005778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3738      	adds	r7, #56	; 0x38
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	b672      	cpsid	i
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	b662      	cpsie	i
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSendFromISR+0x40>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x44>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericSendFromISR+0x46>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	b672      	cpsid	i
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	b662      	cpsie	i
 8004cfe:	623b      	str	r3, [r7, #32]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSendFromISR+0x72>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSendFromISR+0x76>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSendFromISR+0x78>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	b672      	cpsid	i
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	b662      	cpsie	i
 8004d30:	61fb      	str	r3, [r7, #28]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d36:	f001 ff41 	bl	8006bbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	b672      	cpsid	i
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	b662      	cpsie	i
 8004d52:	61ba      	str	r2, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSendFromISR+0xcc>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d12c      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7c:	f000 f916 	bl	8004fac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d112      	bne.n	8004db0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	3324      	adds	r3, #36	; 0x24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 ff14 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00e      	beq.n	8004dc0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e007      	b.n	8004dc0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004db0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db4:	3301      	adds	r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	b25a      	sxtb	r2, r3
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dc4:	e001      	b.n	8004dca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3738      	adds	r7, #56	; 0x38
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <xQueueReceive+0x34>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	b672      	cpsid	i
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	b662      	cpsie	i
 8004e0e:	623b      	str	r3, [r7, #32]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <xQueueReceive+0x42>
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueReceive+0x46>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueReceive+0x48>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10c      	bne.n	8004e46 <xQueueReceive+0x66>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	b672      	cpsid	i
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	b662      	cpsie	i
 8004e40:	61fb      	str	r3, [r7, #28]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e46:	f001 f887 	bl	8005f58 <xTaskGetSchedulerState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xQueueReceive+0x76>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueReceive+0x7a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueReceive+0x7c>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10c      	bne.n	8004e7a <xQueueReceive+0x9a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	61bb      	str	r3, [r7, #24]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e7a:	f001 fdb7 	bl	80069ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01f      	beq.n	8004eca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8e:	f000 f8f7 	bl	8005080 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00f      	beq.n	8004ec2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	3310      	adds	r3, #16
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fe8c 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	; (8004fa8 <xQueueReceive+0x1c8>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ec2:	f001 fdc7 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e069      	b.n	8004f9e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed0:	f001 fdc0 	bl	8006a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e062      	b.n	8004f9e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ede:	f107 0310 	add.w	r3, r7, #16
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fed4 	bl	8005c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eec:	f001 fdb2 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef0:	f000 fc34 	bl	800575c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef4:	f001 fd7a 	bl	80069ec <vPortEnterCritical>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d103      	bne.n	8004f0e <xQueueReceive+0x12e>
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f14:	b25b      	sxtb	r3, r3
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d103      	bne.n	8004f24 <xQueueReceive+0x144>
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f24:	f001 fd96 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f28:	1d3a      	adds	r2, r7, #4
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fec3 	bl	8005cbc <xTaskCheckForTimeOut>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d123      	bne.n	8004f84 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3e:	f000 f917 	bl	8005170 <prvIsQueueEmpty>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fde3 	bl	8005b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f58:	f000 f8b8 	bl	80050cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f5c:	f000 fc0c 	bl	8005778 <xTaskResumeAll>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d189      	bne.n	8004e7a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <xQueueReceive+0x1c8>)
 8004f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	e780      	b.n	8004e7a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7a:	f000 f8a7 	bl	80050cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f7e:	f000 fbfb 	bl	8005778 <xTaskResumeAll>
 8004f82:	e77a      	b.n	8004e7a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	f000 f8a1 	bl	80050cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f8a:	f000 fbf5 	bl	8005778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f90:	f000 f8ee 	bl	8005170 <prvIsQueueEmpty>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f43f af6f 	beq.w	8004e7a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3730      	adds	r7, #48	; 0x30
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d14d      	bne.n	800506e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ffdc 	bl	8005f94 <xTaskPriorityDisinherit>
 8004fdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e043      	b.n	800506e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d119      	bne.n	8005020 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6858      	ldr	r0, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	f002 f838 	bl	800706c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d32b      	bcc.n	800506e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	e026      	b.n	800506e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68d8      	ldr	r0, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	461a      	mov	r2, r3
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	f002 f81e 	bl	800706c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	425b      	negs	r3, r3
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d207      	bcs.n	800505c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	425b      	negs	r3, r3
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d105      	bne.n	800506e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	3b01      	subs	r3, #1
 800506c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005076:	697b      	ldr	r3, [r7, #20]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	441a      	add	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d303      	bcc.n	80050b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	6838      	ldr	r0, [r7, #0]
 80050c0:	f001 ffd4 	bl	800706c <memcpy>
	}
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050d4:	f001 fc8a 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e0:	e011      	b.n	8005106 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3324      	adds	r3, #36	; 0x24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fd68 	bl	8005bc4 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050fa:	f000 fe45 	bl	8005d88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	3b01      	subs	r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	dce9      	bgt.n	80050e2 <prvUnlockQueue+0x16>
 800510e:	e000      	b.n	8005112 <prvUnlockQueue+0x46>
					break;
 8005110:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800511a:	f001 fc9b 	bl	8006a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800511e:	f001 fc65 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005128:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512a:	e011      	b.n	8005150 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3310      	adds	r3, #16
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fd43 	bl	8005bc4 <xTaskRemoveFromEventList>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005144:	f000 fe20 	bl	8005d88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005148:	7bbb      	ldrb	r3, [r7, #14]
 800514a:	3b01      	subs	r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dce9      	bgt.n	800512c <prvUnlockQueue+0x60>
 8005158:	e000      	b.n	800515c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800515a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005164:	f001 fc76 	bl	8006a54 <vPortExitCritical>
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005178:	f001 fc38 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e001      	b.n	800518e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800518e:	f001 fc61 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051a4:	f001 fc22 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d102      	bne.n	80051ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e001      	b.n	80051be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051be:	f001 fc49 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 80051c2:	68fb      	ldr	r3, [r7, #12]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e014      	b.n	8005206 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051dc:	4a0f      	ldr	r2, [pc, #60]	; (800521c <vQueueAddToRegistry+0x50>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051e8:	490c      	ldr	r1, [pc, #48]	; (800521c <vQueueAddToRegistry+0x50>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <vQueueAddToRegistry+0x50>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051fe:	e006      	b.n	800520e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d9e7      	bls.n	80051dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	2000093c 	.word	0x2000093c

08005220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005230:	f001 fbdc 	bl	80069ec <vPortEnterCritical>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800523a:	b25b      	sxtb	r3, r3
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d103      	bne.n	800524a <vQueueWaitForMessageRestricted+0x2a>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005250:	b25b      	sxtb	r3, r3
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d103      	bne.n	8005260 <vQueueWaitForMessageRestricted+0x40>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005260:	f001 fbf8 	bl	8006a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	3324      	adds	r3, #36	; 0x24
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fc77 	bl	8005b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7ff ff26 	bl	80050cc <prvUnlockQueue>
	}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	; 0x38
 800528c:	af04      	add	r7, sp, #16
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10c      	bne.n	80052b6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	623b      	str	r3, [r7, #32]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	b672      	cpsid	i
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	b662      	cpsie	i
 80052d0:	61fb      	str	r3, [r7, #28]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052d6:	23bc      	movs	r3, #188	; 0xbc
 80052d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2bbc      	cmp	r3, #188	; 0xbc
 80052de:	d00c      	beq.n	80052fa <xTaskCreateStatic+0x72>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	b672      	cpsid	i
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	b662      	cpsie	i
 80052f4:	61bb      	str	r3, [r7, #24]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01e      	beq.n	8005340 <xTaskCreateStatic+0xb8>
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	2202      	movs	r2, #2
 8005316:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800531a:	2300      	movs	r3, #0
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f850 	bl	80053d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533a:	f000 f8f5 	bl	8005528 <prvAddNewTaskToReadyList>
 800533e:	e001      	b.n	8005344 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005344:	697b      	ldr	r3, [r7, #20]
	}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800534e:	b580      	push	{r7, lr}
 8005350:	b08c      	sub	sp, #48	; 0x30
 8005352:	af04      	add	r7, sp, #16
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fc6e 	bl	8006c44 <pvPortMalloc>
 8005368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005370:	20bc      	movs	r0, #188	; 0xbc
 8005372:	f001 fc67 	bl	8006c44 <pvPortMalloc>
 8005376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
 8005384:	e005      	b.n	8005392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005386:	6978      	ldr	r0, [r7, #20]
 8005388:	f001 fd26 	bl	8006dd8 <vPortFree>
 800538c:	e001      	b.n	8005392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	2300      	movs	r3, #0
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f80e 	bl	80053d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053bc:	69f8      	ldr	r0, [r7, #28]
 80053be:	f000 f8b3 	bl	8005528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	e002      	b.n	80053ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053ce:	69bb      	ldr	r3, [r7, #24]
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	461a      	mov	r2, r3
 80053f0:	21a5      	movs	r1, #165	; 0xa5
 80053f2:	f001 fe49 	bl	8007088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005400:	440b      	add	r3, r1
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	b672      	cpsid	i
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	b662      	cpsie	i
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01f      	beq.n	800547a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e012      	b.n	8005466 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	7819      	ldrb	r1, [r3, #0]
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	3334      	adds	r3, #52	; 0x34
 8005450:	460a      	mov	r2, r1
 8005452:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d006      	beq.n	800546e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	3301      	adds	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d9e9      	bls.n	8005440 <prvInitialiseNewTask+0x68>
 800546c:	e000      	b.n	8005470 <prvInitialiseNewTask+0x98>
			{
				break;
 800546e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005478:	e003      	b.n	8005482 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	2b37      	cmp	r3, #55	; 0x37
 8005486:	d901      	bls.n	800548c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005488:	2337      	movs	r3, #55	; 0x37
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005496:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2200      	movs	r2, #0
 800549c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f952 	bl	800474c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	3318      	adds	r3, #24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff f94d 	bl	800474c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	3354      	adds	r3, #84	; 0x54
 80054dc:	2260      	movs	r2, #96	; 0x60
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fdd1 	bl	8007088 <memset>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	4a0c      	ldr	r2, [pc, #48]	; (800551c <prvInitialiseNewTask+0x144>)
 80054ea:	659a      	str	r2, [r3, #88]	; 0x58
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <prvInitialiseNewTask+0x148>)
 80054f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <prvInitialiseNewTask+0x14c>)
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	69b8      	ldr	r0, [r7, #24]
 80054fe:	f001 f96b 	bl	80067d8 <pxPortInitialiseStack>
 8005502:	4602      	mov	r2, r0
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005512:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005514:	bf00      	nop
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	08007cc4 	.word	0x08007cc4
 8005520:	08007ce4 	.word	0x08007ce4
 8005524:	08007ca4 	.word	0x08007ca4

08005528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005530:	f001 fa5c 	bl	80069ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 800553c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800553e:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005546:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <prvAddNewTaskToReadyList+0xc4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d110      	bne.n	8005576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005554:	f000 fc3c 	bl	8005dd0 <prvInitialiseTaskLists>
 8005558:	e00d      	b.n	8005576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <prvAddNewTaskToReadyList+0xcc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	429a      	cmp	r2, r3
 800556e:	d802      	bhi.n	8005576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 800557e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <prvAddNewTaskToReadyList+0xd0>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <prvAddNewTaskToReadyList+0xd4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <prvAddNewTaskToReadyList+0x74>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <prvAddNewTaskToReadyList+0xd4>)
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <prvAddNewTaskToReadyList+0xd8>)
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7ff f8d7 	bl	8004766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055b8:	f001 fa4c 	bl	8006a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <prvAddNewTaskToReadyList+0xcc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00e      	beq.n	80055e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvAddNewTaskToReadyList+0xc8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d207      	bcs.n	80055e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <prvAddNewTaskToReadyList+0xdc>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000e50 	.word	0x20000e50
 80055f0:	2000097c 	.word	0x2000097c
 80055f4:	20000e5c 	.word	0x20000e5c
 80055f8:	20000e6c 	.word	0x20000e6c
 80055fc:	20000e58 	.word	0x20000e58
 8005600:	20000980 	.word	0x20000980
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d019      	beq.n	800564e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <vTaskDelay+0x64>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <vTaskDelay+0x34>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	b672      	cpsid	i
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	b662      	cpsie	i
 8005636:	60bb      	str	r3, [r7, #8]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800563c:	f000 f88e 	bl	800575c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005640:	2100      	movs	r1, #0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fd18 	bl	8006078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005648:	f000 f896 	bl	8005778 <xTaskResumeAll>
 800564c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <vTaskDelay+0x68>)
 8005656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000e78 	.word	0x20000e78
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005682:	463a      	mov	r2, r7
 8005684:	1d39      	adds	r1, r7, #4
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff f80a 	bl	80046a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	9202      	str	r2, [sp, #8]
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	460a      	mov	r2, r1
 80056a2:	4926      	ldr	r1, [pc, #152]	; (800573c <vTaskStartScheduler+0xc8>)
 80056a4:	4826      	ldr	r0, [pc, #152]	; (8005740 <vTaskStartScheduler+0xcc>)
 80056a6:	f7ff fdef 	bl	8005288 <xTaskCreateStatic>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <vTaskStartScheduler+0xd0>)
 80056ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056b0:	4b24      	ldr	r3, [pc, #144]	; (8005744 <vTaskStartScheduler+0xd0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056b8:	2301      	movs	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e001      	b.n	80056c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d102      	bne.n	80056ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056c8:	f000 fd2a 	bl	8006120 <xTimerCreateTimerTask>
 80056cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d11d      	bne.n	8005710 <vTaskStartScheduler+0x9c>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	613b      	str	r3, [r7, #16]
}
 80056ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ec:	4b16      	ldr	r3, [pc, #88]	; (8005748 <vTaskStartScheduler+0xd4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3354      	adds	r3, #84	; 0x54
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <vTaskStartScheduler+0xd8>)
 80056f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <vTaskStartScheduler+0xdc>)
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <vTaskStartScheduler+0xe0>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005704:	4b14      	ldr	r3, [pc, #80]	; (8005758 <vTaskStartScheduler+0xe4>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800570a:	f001 f8f1 	bl	80068f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800570e:	e010      	b.n	8005732 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d10c      	bne.n	8005732 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	b672      	cpsid	i
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	b662      	cpsie	i
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <vTaskStartScheduler+0xbc>
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	08007c2c 	.word	0x08007c2c
 8005740:	08005da1 	.word	0x08005da1
 8005744:	20000e74 	.word	0x20000e74
 8005748:	2000097c 	.word	0x2000097c
 800574c:	20000010 	.word	0x20000010
 8005750:	20000e70 	.word	0x20000e70
 8005754:	20000e5c 	.word	0x20000e5c
 8005758:	20000e54 	.word	0x20000e54

0800575c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <vTaskSuspendAll+0x18>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	4a03      	ldr	r2, [pc, #12]	; (8005774 <vTaskSuspendAll+0x18>)
 8005768:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000e78 	.word	0x20000e78

08005778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005786:	4b43      	ldr	r3, [pc, #268]	; (8005894 <xTaskResumeAll+0x11c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <xTaskResumeAll+0x30>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	b672      	cpsid	i
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	b662      	cpsie	i
 80057a2:	603b      	str	r3, [r7, #0]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057a8:	f001 f920 	bl	80069ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <xTaskResumeAll+0x11c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	4a38      	ldr	r2, [pc, #224]	; (8005894 <xTaskResumeAll+0x11c>)
 80057b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b37      	ldr	r3, [pc, #220]	; (8005894 <xTaskResumeAll+0x11c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d162      	bne.n	8005884 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <xTaskResumeAll+0x120>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d05e      	beq.n	8005884 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057c6:	e02f      	b.n	8005828 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <xTaskResumeAll+0x124>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3318      	adds	r3, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff f823 	bl	8004820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3304      	adds	r3, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff f81e 	bl	8004820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <xTaskResumeAll+0x128>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d903      	bls.n	80057f8 <xTaskResumeAll+0x80>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <xTaskResumeAll+0x128>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4a27      	ldr	r2, [pc, #156]	; (80058a4 <xTaskResumeAll+0x12c>)
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fe ffa9 	bl	8004766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <xTaskResumeAll+0x130>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <xTaskResumeAll+0x134>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <xTaskResumeAll+0x124>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1cb      	bne.n	80057c8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005836:	f000 fb6f 	bl	8005f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <xTaskResumeAll+0x138>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005846:	f000 f847 	bl	80058d8 <xTaskIncrementTick>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <xTaskResumeAll+0x134>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3b01      	subs	r3, #1
 800585a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f1      	bne.n	8005846 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005862:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <xTaskResumeAll+0x138>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <xTaskResumeAll+0x134>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTaskResumeAll+0x13c>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005884:	f001 f8e6 	bl	8006a54 <vPortExitCritical>

	return xAlreadyYielded;
 8005888:	68bb      	ldr	r3, [r7, #8]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000e78 	.word	0x20000e78
 8005898:	20000e50 	.word	0x20000e50
 800589c:	20000e10 	.word	0x20000e10
 80058a0:	20000e58 	.word	0x20000e58
 80058a4:	20000980 	.word	0x20000980
 80058a8:	2000097c 	.word	0x2000097c
 80058ac:	20000e64 	.word	0x20000e64
 80058b0:	20000e60 	.word	0x20000e60
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <xTaskGetTickCount+0x1c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058c4:	687b      	ldr	r3, [r7, #4]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000e54 	.word	0x20000e54

080058d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058e2:	4b50      	ldr	r3, [pc, #320]	; (8005a24 <xTaskIncrementTick+0x14c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 808b 	bne.w	8005a02 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058ec:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <xTaskIncrementTick+0x150>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058f4:	4a4c      	ldr	r2, [pc, #304]	; (8005a28 <xTaskIncrementTick+0x150>)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d122      	bne.n	8005946 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005900:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <xTaskIncrementTick+0x4c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	b672      	cpsid	i
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	b662      	cpsie	i
 800591e:	603b      	str	r3, [r7, #0]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xTaskIncrementTick+0x4a>
 8005924:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <xTaskIncrementTick+0x158>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a3f      	ldr	r2, [pc, #252]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	4a3f      	ldr	r2, [pc, #252]	; (8005a30 <xTaskIncrementTick+0x158>)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <xTaskIncrementTick+0x15c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <xTaskIncrementTick+0x15c>)
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	f000 fae9 	bl	8005f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005946:	4b3c      	ldr	r3, [pc, #240]	; (8005a38 <xTaskIncrementTick+0x160>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d349      	bcc.n	80059e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005950:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800595a:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <xTaskIncrementTick+0x160>)
 800595c:	f04f 32ff 	mov.w	r2, #4294967295
 8005960:	601a      	str	r2, [r3, #0]
					break;
 8005962:	e03f      	b.n	80059e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005964:	4b31      	ldr	r3, [pc, #196]	; (8005a2c <xTaskIncrementTick+0x154>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d203      	bcs.n	8005984 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800597c:	4a2e      	ldr	r2, [pc, #184]	; (8005a38 <xTaskIncrementTick+0x160>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005982:	e02f      	b.n	80059e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	3304      	adds	r3, #4
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe ff49 	bl	8004820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3318      	adds	r3, #24
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe ff40 	bl	8004820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <xTaskIncrementTick+0x164>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <xTaskIncrementTick+0xdc>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <xTaskIncrementTick+0x164>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <xTaskIncrementTick+0x168>)
 80059c2:	441a      	add	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f7fe fecb 	bl	8004766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <xTaskIncrementTick+0x16c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3b8      	bcc.n	8005950 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e2:	e7b5      	b.n	8005950 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059e4:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <xTaskIncrementTick+0x16c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	4915      	ldr	r1, [pc, #84]	; (8005a40 <xTaskIncrementTick+0x168>)
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d907      	bls.n	8005a0c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e004      	b.n	8005a0c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a02:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <xTaskIncrementTick+0x170>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <xTaskIncrementTick+0x170>)
 8005a0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <xTaskIncrementTick+0x174>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a18:	697b      	ldr	r3, [r7, #20]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000e78 	.word	0x20000e78
 8005a28:	20000e54 	.word	0x20000e54
 8005a2c:	20000e08 	.word	0x20000e08
 8005a30:	20000e0c 	.word	0x20000e0c
 8005a34:	20000e68 	.word	0x20000e68
 8005a38:	20000e70 	.word	0x20000e70
 8005a3c:	20000e58 	.word	0x20000e58
 8005a40:	20000980 	.word	0x20000980
 8005a44:	2000097c 	.word	0x2000097c
 8005a48:	20000e60 	.word	0x20000e60
 8005a4c:	20000e64 	.word	0x20000e64

08005a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <vTaskSwitchContext+0xb4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <vTaskSwitchContext+0xb8>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a64:	e048      	b.n	8005af8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005a66:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <vTaskSwitchContext+0xb8>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6c:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <vTaskSwitchContext+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e012      	b.n	8005a9a <vTaskSwitchContext+0x4a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <vTaskSwitchContext+0x44>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	b672      	cpsid	i
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	b662      	cpsie	i
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <vTaskSwitchContext+0x42>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	491d      	ldr	r1, [pc, #116]	; (8005b10 <vTaskSwitchContext+0xc0>)
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0e2      	beq.n	8005a74 <vTaskSwitchContext+0x24>
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <vTaskSwitchContext+0xc0>)
 8005aba:	4413      	add	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d104      	bne.n	8005ade <vTaskSwitchContext+0x8e>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <vTaskSwitchContext+0xc4>)
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <vTaskSwitchContext+0xbc>)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <vTaskSwitchContext+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3354      	adds	r3, #84	; 0x54
 8005af4:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <vTaskSwitchContext+0xc8>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000e78 	.word	0x20000e78
 8005b08:	20000e64 	.word	0x20000e64
 8005b0c:	20000e58 	.word	0x20000e58
 8005b10:	20000980 	.word	0x20000980
 8005b14:	2000097c 	.word	0x2000097c
 8005b18:	20000010 	.word	0x20000010

08005b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	b672      	cpsid	i
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	b662      	cpsie	i
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b46:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <vTaskPlaceOnEventList+0x48>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fe fe2d 	bl	80047ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b54:	2101      	movs	r1, #1
 8005b56:	6838      	ldr	r0, [r7, #0]
 8005b58:	f000 fa8e 	bl	8006078 <prvAddCurrentTaskToDelayedList>
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	2000097c 	.word	0x2000097c

08005b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	b672      	cpsid	i
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	b662      	cpsie	i
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <vTaskPlaceOnEventListRestricted+0x58>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7fe fde2 	bl	8004766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	68b8      	ldr	r0, [r7, #8]
 8005bb2:	f000 fa61 	bl	8006078 <prvAddCurrentTaskToDelayedList>
	}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	2000097c 	.word	0x2000097c

08005bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10c      	bne.n	8005bf4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	b672      	cpsid	i
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	b662      	cpsie	i
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3318      	adds	r3, #24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fe11 	bl	8004820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11d      	bne.n	8005c42 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fe08 	bl	8004820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <xTaskRemoveFromEventList+0xb8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <xTaskRemoveFromEventList+0x60>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <xTaskRemoveFromEventList+0xb8>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <xTaskRemoveFromEventList+0xbc>)
 8005c32:	441a      	add	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fe fd93 	bl	8004766 <vListInsertEnd>
 8005c40:	e005      	b.n	8005c4e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3318      	adds	r3, #24
 8005c46:	4619      	mov	r1, r3
 8005c48:	480e      	ldr	r0, [pc, #56]	; (8005c84 <xTaskRemoveFromEventList+0xc0>)
 8005c4a:	f7fe fd8c 	bl	8004766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <xTaskRemoveFromEventList+0xc4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d905      	bls.n	8005c68 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <xTaskRemoveFromEventList+0xc8>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e001      	b.n	8005c6c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c6c:	697b      	ldr	r3, [r7, #20]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000e78 	.word	0x20000e78
 8005c7c:	20000e58 	.word	0x20000e58
 8005c80:	20000980 	.word	0x20000980
 8005c84:	20000e10 	.word	0x20000e10
 8005c88:	2000097c 	.word	0x2000097c
 8005c8c:	20000e64 	.word	0x20000e64

08005c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <vTaskInternalSetTimeOutState+0x24>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <vTaskInternalSetTimeOutState+0x28>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000e68 	.word	0x20000e68
 8005cb8:	20000e54 	.word	0x20000e54

08005cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	b672      	cpsid	i
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	b662      	cpsie	i
 8005ce0:	613b      	str	r3, [r7, #16]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10c      	bne.n	8005d06 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	b672      	cpsid	i
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	b662      	cpsie	i
 8005d00:	60fb      	str	r3, [r7, #12]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005d06:	f000 fe71 	bl	80069ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <xTaskCheckForTimeOut+0xc4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d22:	d102      	bne.n	8005d2a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e023      	b.n	8005d72 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <xTaskCheckForTimeOut+0xc8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d007      	beq.n	8005d46 <xTaskCheckForTimeOut+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d302      	bcc.n	8005d46 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e015      	b.n	8005d72 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d20b      	bcs.n	8005d68 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff ff97 	bl	8005c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e004      	b.n	8005d72 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d72:	f000 fe6f 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8005d76:	69fb      	ldr	r3, [r7, #28]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000e54 	.word	0x20000e54
 8005d84:	20000e68 	.word	0x20000e68

08005d88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <vTaskMissedYield+0x14>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20000e64 	.word	0x20000e64

08005da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005da8:	f000 f852 	bl	8005e50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <prvIdleTask+0x28>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d9f9      	bls.n	8005da8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <prvIdleTask+0x2c>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dc4:	e7f0      	b.n	8005da8 <prvIdleTask+0x8>
 8005dc6:	bf00      	nop
 8005dc8:	20000980 	.word	0x20000980
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	e00c      	b.n	8005df6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <prvInitialiseTaskLists+0x60>)
 8005de8:	4413      	add	r3, r2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fc8e 	bl	800470c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3301      	adds	r3, #1
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b37      	cmp	r3, #55	; 0x37
 8005dfa:	d9ef      	bls.n	8005ddc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dfc:	480d      	ldr	r0, [pc, #52]	; (8005e34 <prvInitialiseTaskLists+0x64>)
 8005dfe:	f7fe fc85 	bl	800470c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e02:	480d      	ldr	r0, [pc, #52]	; (8005e38 <prvInitialiseTaskLists+0x68>)
 8005e04:	f7fe fc82 	bl	800470c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e08:	480c      	ldr	r0, [pc, #48]	; (8005e3c <prvInitialiseTaskLists+0x6c>)
 8005e0a:	f7fe fc7f 	bl	800470c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e0e:	480c      	ldr	r0, [pc, #48]	; (8005e40 <prvInitialiseTaskLists+0x70>)
 8005e10:	f7fe fc7c 	bl	800470c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e14:	480b      	ldr	r0, [pc, #44]	; (8005e44 <prvInitialiseTaskLists+0x74>)
 8005e16:	f7fe fc79 	bl	800470c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <prvInitialiseTaskLists+0x78>)
 8005e1c:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <prvInitialiseTaskLists+0x64>)
 8005e1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <prvInitialiseTaskLists+0x7c>)
 8005e22:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <prvInitialiseTaskLists+0x68>)
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000980 	.word	0x20000980
 8005e34:	20000de0 	.word	0x20000de0
 8005e38:	20000df4 	.word	0x20000df4
 8005e3c:	20000e10 	.word	0x20000e10
 8005e40:	20000e24 	.word	0x20000e24
 8005e44:	20000e3c 	.word	0x20000e3c
 8005e48:	20000e08 	.word	0x20000e08
 8005e4c:	20000e0c 	.word	0x20000e0c

08005e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e56:	e019      	b.n	8005e8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e58:	f000 fdc8 	bl	80069ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5c:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <prvCheckTasksWaitingTermination+0x50>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe fcd9 	bl	8004820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <prvCheckTasksWaitingTermination+0x54>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	4a0b      	ldr	r2, [pc, #44]	; (8005ea4 <prvCheckTasksWaitingTermination+0x54>)
 8005e76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <prvCheckTasksWaitingTermination+0x58>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <prvCheckTasksWaitingTermination+0x58>)
 8005e80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e82:	f000 fde7 	bl	8006a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f810 	bl	8005eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <prvCheckTasksWaitingTermination+0x58>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e1      	bne.n	8005e58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000e24 	.word	0x20000e24
 8005ea4:	20000e50 	.word	0x20000e50
 8005ea8:	20000e38 	.word	0x20000e38

08005eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3354      	adds	r3, #84	; 0x54
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f98f 	bl	80071dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 ff83 	bl	8006dd8 <vPortFree>
				vPortFree( pxTCB );
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff80 	bl	8006dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ed8:	e01a      	b.n	8005f10 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d103      	bne.n	8005eec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 ff77 	bl	8006dd8 <vPortFree>
	}
 8005eea:	e011      	b.n	8005f10 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d00c      	beq.n	8005f10 <prvDeleteTCB+0x64>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	b672      	cpsid	i
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	b662      	cpsie	i
 8005f0a:	60fb      	str	r3, [r7, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <prvDeleteTCB+0x62>
	}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <prvResetNextTaskUnblockTime+0x38>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f30:	e008      	b.n	8005f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <prvResetNextTaskUnblockTime+0x38>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4a04      	ldr	r2, [pc, #16]	; (8005f54 <prvResetNextTaskUnblockTime+0x3c>)
 8005f42:	6013      	str	r3, [r2, #0]
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000e08 	.word	0x20000e08
 8005f54:	20000e70 	.word	0x20000e70

08005f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <xTaskGetSchedulerState+0x34>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f66:	2301      	movs	r3, #1
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	e008      	b.n	8005f7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <xTaskGetSchedulerState+0x38>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f74:	2302      	movs	r3, #2
 8005f76:	607b      	str	r3, [r7, #4]
 8005f78:	e001      	b.n	8005f7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f7e:	687b      	ldr	r3, [r7, #4]
	}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	20000e5c 	.word	0x20000e5c
 8005f90:	20000e78 	.word	0x20000e78

08005f94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d05a      	beq.n	8006060 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005faa:	4b30      	ldr	r3, [pc, #192]	; (800606c <xTaskPriorityDisinherit+0xd8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d00c      	beq.n	8005fce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	b672      	cpsid	i
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	b662      	cpsie	i
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10c      	bne.n	8005ff0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	b672      	cpsid	i
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	b662      	cpsie	i
 8005fea:	60bb      	str	r3, [r7, #8]
}
 8005fec:	bf00      	nop
 8005fee:	e7fe      	b.n	8005fee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	1e5a      	subs	r2, r3, #1
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006002:	429a      	cmp	r2, r3
 8006004:	d02c      	beq.n	8006060 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	2b00      	cmp	r3, #0
 800600c:	d128      	bne.n	8006060 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fc04 	bl	8004820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <xTaskPriorityDisinherit+0xdc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <xTaskPriorityDisinherit+0xac>
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <xTaskPriorityDisinherit+0xdc>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <xTaskPriorityDisinherit+0xe0>)
 800604e:	441a      	add	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fb85 	bl	8004766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006060:	697b      	ldr	r3, [r7, #20]
	}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	2000097c 	.word	0x2000097c
 8006070:	20000e58 	.word	0x20000e58
 8006074:	20000980 	.word	0x20000980

08006078 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006082:	4b21      	ldr	r3, [pc, #132]	; (8006108 <prvAddCurrentTaskToDelayedList+0x90>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006088:	4b20      	ldr	r3, [pc, #128]	; (800610c <prvAddCurrentTaskToDelayedList+0x94>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3304      	adds	r3, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fbc6 	bl	8004820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d10a      	bne.n	80060b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060a2:	4b1a      	ldr	r3, [pc, #104]	; (800610c <prvAddCurrentTaskToDelayedList+0x94>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4819      	ldr	r0, [pc, #100]	; (8006110 <prvAddCurrentTaskToDelayedList+0x98>)
 80060ac:	f7fe fb5b 	bl	8004766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060b0:	e026      	b.n	8006100 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <prvAddCurrentTaskToDelayedList+0x94>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d209      	bcs.n	80060de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <prvAddCurrentTaskToDelayedList+0x94>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fb69 	bl	80047ae <vListInsert>
}
 80060dc:	e010      	b.n	8006100 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddCurrentTaskToDelayedList+0x94>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7fe fb5f 	bl	80047ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <prvAddCurrentTaskToDelayedList+0xa4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d202      	bcs.n	8006100 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <prvAddCurrentTaskToDelayedList+0xa4>)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000e54 	.word	0x20000e54
 800610c:	2000097c 	.word	0x2000097c
 8006110:	20000e3c 	.word	0x20000e3c
 8006114:	20000e0c 	.word	0x20000e0c
 8006118:	20000e08 	.word	0x20000e08
 800611c:	20000e70 	.word	0x20000e70

08006120 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800612a:	f000 fb15 	bl	8006758 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <xTimerCreateTimerTask+0x84>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d021      	beq.n	800617a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800613e:	1d3a      	adds	r2, r7, #4
 8006140:	f107 0108 	add.w	r1, r7, #8
 8006144:	f107 030c 	add.w	r3, r7, #12
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fac5 	bl	80046d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	9202      	str	r2, [sp, #8]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	2302      	movs	r3, #2
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	460a      	mov	r2, r1
 8006160:	4911      	ldr	r1, [pc, #68]	; (80061a8 <xTimerCreateTimerTask+0x88>)
 8006162:	4812      	ldr	r0, [pc, #72]	; (80061ac <xTimerCreateTimerTask+0x8c>)
 8006164:	f7ff f890 	bl	8005288 <xTaskCreateStatic>
 8006168:	4603      	mov	r3, r0
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <xTimerCreateTimerTask+0x90>)
 800616c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800616e:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <xTimerCreateTimerTask+0x90>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006176:	2301      	movs	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10c      	bne.n	800619a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	613b      	str	r3, [r7, #16]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800619a:	697b      	ldr	r3, [r7, #20]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000eac 	.word	0x20000eac
 80061a8:	08007c34 	.word	0x08007c34
 80061ac:	080062f1 	.word	0x080062f1
 80061b0:	20000eb0 	.word	0x20000eb0

080061b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10c      	bne.n	80061e6 <xTimerGenericCommand+0x32>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	b672      	cpsid	i
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	b662      	cpsie	i
 80061e0:	623b      	str	r3, [r7, #32]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <xTimerGenericCommand+0x9c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02a      	beq.n	8006244 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	dc18      	bgt.n	8006232 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006200:	f7ff feaa 	bl	8005f58 <xTaskGetSchedulerState>
 8006204:	4603      	mov	r3, r0
 8006206:	2b02      	cmp	r3, #2
 8006208:	d109      	bne.n	800621e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <xTimerGenericCommand+0x9c>)
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f107 0110 	add.w	r1, r7, #16
 8006212:	2300      	movs	r3, #0
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	f7fe fc3d 	bl	8004a94 <xQueueGenericSend>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
 800621c:	e012      	b.n	8006244 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <xTimerGenericCommand+0x9c>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f107 0110 	add.w	r1, r7, #16
 8006226:	2300      	movs	r3, #0
 8006228:	2200      	movs	r2, #0
 800622a:	f7fe fc33 	bl	8004a94 <xQueueGenericSend>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24
 8006230:	e008      	b.n	8006244 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <xTimerGenericCommand+0x9c>)
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f107 0110 	add.w	r1, r7, #16
 800623a:	2300      	movs	r3, #0
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	f7fe fd2f 	bl	8004ca0 <xQueueGenericSendFromISR>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006246:	4618      	mov	r0, r3
 8006248:	3728      	adds	r7, #40	; 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000eac 	.word	0x20000eac

08006254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b23      	ldr	r3, [pc, #140]	; (80062ec <prvProcessExpiredTimer+0x98>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fad7 	bl	8004820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d024      	beq.n	80062ca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	18d1      	adds	r1, r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	6978      	ldr	r0, [r7, #20]
 800628e:	f000 f8d3 	bl	8006438 <prvInsertTimerInActiveList>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d021      	beq.n	80062dc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006298:	2300      	movs	r3, #0
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2300      	movs	r3, #0
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	2100      	movs	r1, #0
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f7ff ff86 	bl	80061b4 <xTimerGenericCommand>
 80062a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d115      	bne.n	80062dc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	6978      	ldr	r0, [r7, #20]
 80062e2:	4798      	blx	r3
}
 80062e4:	bf00      	nop
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000ea4 	.word	0x20000ea4

080062f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f857 	bl	80063b0 <prvGetNextExpireTime>
 8006302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f803 	bl	8006314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800630e:	f000 f8d5 	bl	80064bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006312:	e7f1      	b.n	80062f8 <prvTimerTask+0x8>

08006314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800631e:	f7ff fa1d 	bl	800575c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	4618      	mov	r0, r3
 8006328:	f000 f866 	bl	80063f8 <prvSampleTimeNow>
 800632c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d130      	bne.n	8006396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <prvProcessTimerOrBlockTask+0x3c>
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	429a      	cmp	r2, r3
 8006340:	d806      	bhi.n	8006350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006342:	f7ff fa19 	bl	8005778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ff83 	bl	8006254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800634e:	e024      	b.n	800639a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d008      	beq.n	8006368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <prvProcessTimerOrBlockTask+0x90>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <prvProcessTimerOrBlockTask+0x50>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <prvProcessTimerOrBlockTask+0x52>
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <prvProcessTimerOrBlockTask+0x94>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4619      	mov	r1, r3
 8006376:	f7fe ff53 	bl	8005220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800637a:	f7ff f9fd 	bl	8005778 <xTaskResumeAll>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006384:	4b09      	ldr	r3, [pc, #36]	; (80063ac <prvProcessTimerOrBlockTask+0x98>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
}
 8006394:	e001      	b.n	800639a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006396:	f7ff f9ef 	bl	8005778 <xTaskResumeAll>
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000ea8 	.word	0x20000ea8
 80063a8:	20000eac 	.word	0x20000eac
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <prvGetNextExpireTime+0x44>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <prvGetNextExpireTime+0x16>
 80063c2:	2201      	movs	r2, #1
 80063c4:	e000      	b.n	80063c8 <prvGetNextExpireTime+0x18>
 80063c6:	2200      	movs	r2, #0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <prvGetNextExpireTime+0x44>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	e001      	b.n	80063e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063e4:	68fb      	ldr	r3, [r7, #12]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000ea4 	.word	0x20000ea4

080063f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006400:	f7ff fa5a 	bl	80058b8 <xTaskGetTickCount>
 8006404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <prvSampleTimeNow+0x3c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	429a      	cmp	r2, r3
 800640e:	d205      	bcs.n	800641c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006410:	f000 f93c 	bl	800668c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e002      	b.n	8006422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006422:	4a04      	ldr	r2, [pc, #16]	; (8006434 <prvSampleTimeNow+0x3c>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000eb4 	.word	0x20000eb4

08006438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d812      	bhi.n	8006484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e01b      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <prvInsertTimerInActiveList+0x7c>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f7fe f996 	bl	80047ae <vListInsert>
 8006482:	e012      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d206      	bcs.n	800649a <prvInsertTimerInActiveList+0x62>
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d302      	bcc.n	800649a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e007      	b.n	80064aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <prvInsertTimerInActiveList+0x80>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f7fe f982 	bl	80047ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000ea8 	.word	0x20000ea8
 80064b8:	20000ea4 	.word	0x20000ea4

080064bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08e      	sub	sp, #56	; 0x38
 80064c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064c2:	e0d0      	b.n	8006666 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da1a      	bge.n	8006500 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	3304      	adds	r3, #4
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10c      	bne.n	80064f0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	b672      	cpsid	i
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	b662      	cpsie	i
 80064ea:	61fb      	str	r3, [r7, #28]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f6:	6850      	ldr	r0, [r2, #4]
 80064f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fa:	6892      	ldr	r2, [r2, #8]
 80064fc:	4611      	mov	r1, r2
 80064fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f2c0 80ae 	blt.w	8006664 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe f981 	bl	8004820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800651e:	463b      	mov	r3, r7
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff69 	bl	80063f8 <prvSampleTimeNow>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b09      	cmp	r3, #9
 800652c:	f200 809b 	bhi.w	8006666 <prvProcessReceivedCommands+0x1aa>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <prvProcessReceivedCommands+0x7c>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006561 	.word	0x08006561
 800653c:	08006561 	.word	0x08006561
 8006540:	08006561 	.word	0x08006561
 8006544:	080065d9 	.word	0x080065d9
 8006548:	080065ed 	.word	0x080065ed
 800654c:	0800663b 	.word	0x0800663b
 8006550:	08006561 	.word	0x08006561
 8006554:	08006561 	.word	0x08006561
 8006558:	080065d9 	.word	0x080065d9
 800655c:	080065ed 	.word	0x080065ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	18d1      	adds	r1, r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006580:	f7ff ff5a 	bl	8006438 <prvInsertTimerInActiveList>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d06d      	beq.n	8006666 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006590:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d062      	beq.n	8006666 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	441a      	add	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f7ff fdff 	bl	80061b4 <xTimerGenericCommand>
 80065b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d153      	bne.n	8006666 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	b672      	cpsid	i
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	b662      	cpsie	i
 80065d2:	61bb      	str	r3, [r7, #24]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065ea:	e03c      	b.n	8006666 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10c      	bne.n	8006626 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	b672      	cpsid	i
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	b662      	cpsie	i
 8006620:	617b      	str	r3, [r7, #20]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	18d1      	adds	r1, r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006634:	f7ff ff00 	bl	8006438 <prvInsertTimerInActiveList>
					break;
 8006638:	e015      	b.n	8006666 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664a:	f000 fbc5 	bl	8006dd8 <vPortFree>
 800664e:	e00a      	b.n	8006666 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006662:	e000      	b.n	8006666 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006664:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <prvProcessReceivedCommands+0x1cc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	1d39      	adds	r1, r7, #4
 800666c:	2200      	movs	r2, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fbb6 	bl	8004de0 <xQueueReceive>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f47f af24 	bne.w	80064c4 <prvProcessReceivedCommands+0x8>
	}
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	3730      	adds	r7, #48	; 0x30
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000eac 	.word	0x20000eac

0800668c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006692:	e04a      	b.n	800672a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006694:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <prvSwitchTimerLists+0xc4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <prvSwitchTimerLists+0xc4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe f8b7 	bl	8004820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d030      	beq.n	800672a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d90e      	bls.n	80066f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <prvSwitchTimerLists+0xc4>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4610      	mov	r0, r2
 80066f2:	f7fe f85c 	bl	80047ae <vListInsert>
 80066f6:	e018      	b.n	800672a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066f8:	2300      	movs	r3, #0
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	2300      	movs	r3, #0
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	2100      	movs	r1, #0
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fd56 	bl	80061b4 <xTimerGenericCommand>
 8006708:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	b672      	cpsid	i
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	b662      	cpsie	i
 8006724:	603b      	str	r3, [r7, #0]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800672a:	4b09      	ldr	r3, [pc, #36]	; (8006750 <prvSwitchTimerLists+0xc4>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1af      	bne.n	8006694 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <prvSwitchTimerLists+0xc4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <prvSwitchTimerLists+0xc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a04      	ldr	r2, [pc, #16]	; (8006750 <prvSwitchTimerLists+0xc4>)
 8006740:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006742:	4a04      	ldr	r2, [pc, #16]	; (8006754 <prvSwitchTimerLists+0xc8>)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6013      	str	r3, [r2, #0]
}
 8006748:	bf00      	nop
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000ea4 	.word	0x20000ea4
 8006754:	20000ea8 	.word	0x20000ea8

08006758 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800675e:	f000 f945 	bl	80069ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <prvCheckForValidListAndQueue+0x60>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d120      	bne.n	80067ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800676a:	4814      	ldr	r0, [pc, #80]	; (80067bc <prvCheckForValidListAndQueue+0x64>)
 800676c:	f7fd ffce 	bl	800470c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006770:	4813      	ldr	r0, [pc, #76]	; (80067c0 <prvCheckForValidListAndQueue+0x68>)
 8006772:	f7fd ffcb 	bl	800470c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <prvCheckForValidListAndQueue+0x6c>)
 8006778:	4a10      	ldr	r2, [pc, #64]	; (80067bc <prvCheckForValidListAndQueue+0x64>)
 800677a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <prvCheckForValidListAndQueue+0x70>)
 800677e:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <prvCheckForValidListAndQueue+0x68>)
 8006780:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006782:	2300      	movs	r3, #0
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <prvCheckForValidListAndQueue+0x74>)
 8006788:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <prvCheckForValidListAndQueue+0x78>)
 800678a:	2110      	movs	r1, #16
 800678c:	200a      	movs	r0, #10
 800678e:	f7fe f8db 	bl	8004948 <xQueueGenericCreateStatic>
 8006792:	4603      	mov	r3, r0
 8006794:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <prvCheckForValidListAndQueue+0x60>)
 8006796:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <prvCheckForValidListAndQueue+0x60>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <prvCheckForValidListAndQueue+0x60>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	490b      	ldr	r1, [pc, #44]	; (80067d4 <prvCheckForValidListAndQueue+0x7c>)
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fd10 	bl	80051cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067ac:	f000 f952 	bl	8006a54 <vPortExitCritical>
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000eac 	.word	0x20000eac
 80067bc:	20000e7c 	.word	0x20000e7c
 80067c0:	20000e90 	.word	0x20000e90
 80067c4:	20000ea4 	.word	0x20000ea4
 80067c8:	20000ea8 	.word	0x20000ea8
 80067cc:	20000f58 	.word	0x20000f58
 80067d0:	20000eb8 	.word	0x20000eb8
 80067d4:	08007c3c 	.word	0x08007c3c

080067d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3b04      	subs	r3, #4
 80067e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3b04      	subs	r3, #4
 80067f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f023 0201 	bic.w	r2, r3, #1
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b04      	subs	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006808:	4a0c      	ldr	r2, [pc, #48]	; (800683c <pxPortInitialiseStack+0x64>)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b14      	subs	r3, #20
 8006812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3b04      	subs	r3, #4
 800681e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f06f 0202 	mvn.w	r2, #2
 8006826:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3b20      	subs	r3, #32
 800682c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800682e:	68fb      	ldr	r3, [r7, #12]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	08006841 	.word	0x08006841

08006840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800684a:	4b14      	ldr	r3, [pc, #80]	; (800689c <prvTaskExitError+0x5c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d00c      	beq.n	800686e <prvTaskExitError+0x2e>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	b672      	cpsid	i
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	b662      	cpsie	i
 8006868:	60fb      	str	r3, [r7, #12]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <prvTaskExitError+0x2c>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	b672      	cpsid	i
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	b662      	cpsie	i
 8006882:	60bb      	str	r3, [r7, #8]
}
 8006884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006886:	bf00      	nop
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0fc      	beq.n	8006888 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	2000000c 	.word	0x2000000c

080068a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <pxCurrentTCBConst2>)
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f380 8809 	msr	PSP, r0
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	4770      	bx	lr
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst2>:
 80068c0:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <prvPortStartFirstTask+0x24>)
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f380 8808 	msr	MSP, r0
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8814 	msr	CONTROL, r0
 80068da:	b662      	cpsie	i
 80068dc:	b661      	cpsie	f
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	df00      	svc	0
 80068e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ea:	bf00      	nop
 80068ec:	e000ed08 	.word	0xe000ed08

080068f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068f6:	4b37      	ldr	r3, [pc, #220]	; (80069d4 <xPortStartScheduler+0xe4>)
 80068f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	22ff      	movs	r2, #255	; 0xff
 8006906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006918:	b2da      	uxtb	r2, r3
 800691a:	4b2f      	ldr	r3, [pc, #188]	; (80069d8 <xPortStartScheduler+0xe8>)
 800691c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800691e:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <xPortStartScheduler+0xec>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006924:	e009      	b.n	800693a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <xPortStartScheduler+0xec>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a2b      	ldr	r2, [pc, #172]	; (80069dc <xPortStartScheduler+0xec>)
 800692e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d0ef      	beq.n	8006926 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006946:	4b25      	ldr	r3, [pc, #148]	; (80069dc <xPortStartScheduler+0xec>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1c3 0307 	rsb	r3, r3, #7
 800694e:	2b04      	cmp	r3, #4
 8006950:	d00c      	beq.n	800696c <xPortStartScheduler+0x7c>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	b672      	cpsid	i
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	b662      	cpsie	i
 8006966:	60bb      	str	r3, [r7, #8]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <xPortStartScheduler+0xec>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <xPortStartScheduler+0xec>)
 8006974:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <xPortStartScheduler+0xec>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <xPortStartScheduler+0xec>)
 8006980:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <xPortStartScheduler+0xf0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a14      	ldr	r2, [pc, #80]	; (80069e0 <xPortStartScheduler+0xf0>)
 8006990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006994:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <xPortStartScheduler+0xf0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <xPortStartScheduler+0xf0>)
 800699c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069a2:	f000 f8dd 	bl	8006b60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <xPortStartScheduler+0xf4>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069ac:	f000 f8fc 	bl	8006ba8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <xPortStartScheduler+0xf8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <xPortStartScheduler+0xf8>)
 80069b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069bc:	f7ff ff84 	bl	80068c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069c0:	f7ff f846 	bl	8005a50 <vTaskSwitchContext>
	prvTaskExitError();
 80069c4:	f7ff ff3c 	bl	8006840 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000e400 	.word	0xe000e400
 80069d8:	20000fa8 	.word	0x20000fa8
 80069dc:	20000fac 	.word	0x20000fac
 80069e0:	e000ed20 	.word	0xe000ed20
 80069e4:	2000000c 	.word	0x2000000c
 80069e8:	e000ef34 	.word	0xe000ef34

080069ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	b672      	cpsid	i
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	b662      	cpsie	i
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d111      	bne.n	8006a40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <vPortEnterCritical+0x64>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <vPortEnterCritical+0x54>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	603b      	str	r3, [r7, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <vPortEnterCritical+0x52>
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <vPortExitCritical+0x28>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <vPortExitCritical+0x46>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f383 8811 	msr	BASEPRI, r3
}
 8006a98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	2000000c 	.word	0x2000000c
 8006aac:	00000000 	.word	0x00000000

08006ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ab0:	f3ef 8009 	mrs	r0, PSP
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <pxCurrentTCBConst>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f01e 0f10 	tst.w	lr, #16
 8006ac0:	bf08      	it	eq
 8006ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	6010      	str	r0, [r2, #0]
 8006acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f380 8811 	msr	BASEPRI, r0
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	f7fe ffb4 	bl	8005a50 <vTaskSwitchContext>
 8006ae8:	f04f 0000 	mov.w	r0, #0
 8006aec:	f380 8811 	msr	BASEPRI, r0
 8006af0:	bc09      	pop	{r0, r3}
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	f01e 0f10 	tst.w	lr, #16
 8006afe:	bf08      	it	eq
 8006b00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b04:	f380 8809 	msr	PSP, r0
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <pxCurrentTCBConst>:
 8006b10:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	607b      	str	r3, [r7, #4]
}
 8006b34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b36:	f7fe fecf 	bl	80058d8 <xTaskIncrementTick>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <SysTick_Handler+0x44>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f383 8811 	msr	BASEPRI, r3
}
 8006b52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortSetupTimerInterrupt+0x34>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <vPortSetupTimerInterrupt+0x38>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <vPortSetupTimerInterrupt+0x3c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <vPortSetupTimerInterrupt+0x40>)
 8006b76:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7a:	099b      	lsrs	r3, r3, #6
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <vPortSetupTimerInterrupt+0x44>)
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <vPortSetupTimerInterrupt+0x34>)
 8006b84:	2207      	movs	r2, #7
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e000e010 	.word	0xe000e010
 8006b98:	e000e018 	.word	0xe000e018
 8006b9c:	20000000 	.word	0x20000000
 8006ba0:	10624dd3 	.word	0x10624dd3
 8006ba4:	e000e014 	.word	0xe000e014

08006ba8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ba8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bb8 <vPortEnableVFP+0x10>
 8006bac:	6801      	ldr	r1, [r0, #0]
 8006bae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bb2:	6001      	str	r1, [r0, #0]
 8006bb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bb6:	bf00      	nop
 8006bb8:	e000ed88 	.word	0xe000ed88

08006bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d916      	bls.n	8006bfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <vPortValidateInterruptPriority+0x78>)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <vPortValidateInterruptPriority+0x7c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	7afa      	ldrb	r2, [r7, #11]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d20c      	bcs.n	8006bfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	b672      	cpsid	i
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	b662      	cpsie	i
 8006bf6:	607b      	str	r3, [r7, #4]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <vPortValidateInterruptPriority+0x80>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <vPortValidateInterruptPriority+0x84>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d90c      	bls.n	8006c26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	b672      	cpsid	i
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	b662      	cpsie	i
 8006c20:	603b      	str	r3, [r7, #0]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <vPortValidateInterruptPriority+0x68>
	}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000e3f0 	.word	0xe000e3f0
 8006c38:	20000fa8 	.word	0x20000fa8
 8006c3c:	e000ed0c 	.word	0xe000ed0c
 8006c40:	20000fac 	.word	0x20000fac

08006c44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c50:	f7fe fd84 	bl	800575c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c54:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <pvPortMalloc+0x180>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c5c:	f000 f91a 	bl	8006e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c60:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <pvPortMalloc+0x184>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 8092 	bne.w	8006d92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01f      	beq.n	8006cb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006c74:	2208      	movs	r2, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00c      	beq.n	8006cb4 <pvPortMalloc+0x70>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	b672      	cpsid	i
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	b662      	cpsie	i
 8006cae:	617b      	str	r3, [r7, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06b      	beq.n	8006d92 <pvPortMalloc+0x14e>
 8006cba:	4b44      	ldr	r3, [pc, #272]	; (8006dcc <pvPortMalloc+0x188>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d866      	bhi.n	8006d92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cc4:	4b42      	ldr	r3, [pc, #264]	; (8006dd0 <pvPortMalloc+0x18c>)
 8006cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cc8:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <pvPortMalloc+0x18c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cce:	e004      	b.n	8006cda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <pvPortMalloc+0xa8>
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f1      	bne.n	8006cd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cec:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <pvPortMalloc+0x180>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d04d      	beq.n	8006d92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	2308      	movs	r3, #8
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d921      	bls.n	8006d5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <pvPortMalloc+0x100>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	b672      	cpsid	i
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	b662      	cpsie	i
 8006d3e:	613b      	str	r3, [r7, #16]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f000 f8fe 	bl	8006f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <pvPortMalloc+0x188>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <pvPortMalloc+0x188>)
 8006d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <pvPortMalloc+0x188>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <pvPortMalloc+0x190>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d203      	bcs.n	8006d7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d76:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <pvPortMalloc+0x188>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <pvPortMalloc+0x190>)
 8006d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <pvPortMalloc+0x184>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d92:	f7fe fcf1 	bl	8005778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <pvPortMalloc+0x176>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	b672      	cpsid	i
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	b662      	cpsie	i
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <pvPortMalloc+0x174>
	return pvReturn;
 8006dba:	69fb      	ldr	r3, [r7, #28]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3728      	adds	r7, #40	; 0x28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20004bb8 	.word	0x20004bb8
 8006dc8:	20004bc4 	.word	0x20004bc4
 8006dcc:	20004bbc 	.word	0x20004bbc
 8006dd0:	20004bb0 	.word	0x20004bb0
 8006dd4:	20004bc0 	.word	0x20004bc0

08006dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04c      	beq.n	8006e84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dea:	2308      	movs	r3, #8
 8006dec:	425b      	negs	r3, r3
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <vPortFree+0xb4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <vPortFree+0x48>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	b672      	cpsid	i
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	b662      	cpsie	i
 8006e1a:	60fb      	str	r3, [r7, #12]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <vPortFree+0x6a>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	60bb      	str	r3, [r7, #8]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <vPortFree+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <vPortFree+0xb4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e68:	f7fe fc78 	bl	800575c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <vPortFree+0xb8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vPortFree+0xb8>)
 8006e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f000 f86c 	bl	8006f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e80:	f7fe fc7a 	bl	8005778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20004bc4 	.word	0x20004bc4
 8006e90:	20004bbc 	.word	0x20004bbc

08006e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <prvHeapInit+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <prvHeapInit+0xac>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <prvHeapInit+0xb0>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <prvHeapInit+0xb0>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvHeapInit+0xb4>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <prvHeapInit+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <prvHeapInit+0xbc>)
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <prvHeapInit+0xc0>)
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000fb0 	.word	0x20000fb0
 8006f44:	20004bb0 	.word	0x20004bb0
 8006f48:	20004bb8 	.word	0x20004bb8
 8006f4c:	20004bc0 	.word	0x20004bc0
 8006f50:	20004bbc 	.word	0x20004bbc
 8006f54:	20004bc4 	.word	0x20004bc4

08006f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <prvInsertBlockIntoFreeList+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e002      	b.n	8006f6c <prvInsertBlockIntoFreeList+0x14>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8f7      	bhi.n	8006f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d108      	bne.n	8006f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d118      	bne.n	8006fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00d      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e008      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d002      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20004bb0 	.word	0x20004bb0
 8007008:	20004bb8 	.word	0x20004bb8

0800700c <atoi>:
 800700c:	220a      	movs	r2, #10
 800700e:	2100      	movs	r1, #0
 8007010:	f000 ba06 	b.w	8007420 <strtol>

08007014 <__errno>:
 8007014:	4b01      	ldr	r3, [pc, #4]	; (800701c <__errno+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000010 	.word	0x20000010

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4d0d      	ldr	r5, [pc, #52]	; (8007058 <__libc_init_array+0x38>)
 8007024:	4c0d      	ldr	r4, [pc, #52]	; (800705c <__libc_init_array+0x3c>)
 8007026:	1b64      	subs	r4, r4, r5
 8007028:	10a4      	asrs	r4, r4, #2
 800702a:	2600      	movs	r6, #0
 800702c:	42a6      	cmp	r6, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	4d0b      	ldr	r5, [pc, #44]	; (8007060 <__libc_init_array+0x40>)
 8007032:	4c0c      	ldr	r4, [pc, #48]	; (8007064 <__libc_init_array+0x44>)
 8007034:	f000 fd98 	bl	8007b68 <_init>
 8007038:	1b64      	subs	r4, r4, r5
 800703a:	10a4      	asrs	r4, r4, #2
 800703c:	2600      	movs	r6, #0
 800703e:	42a6      	cmp	r6, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f855 3b04 	ldr.w	r3, [r5], #4
 8007048:	4798      	blx	r3
 800704a:	3601      	adds	r6, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007052:	4798      	blx	r3
 8007054:	3601      	adds	r6, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08007e40 	.word	0x08007e40
 800705c:	08007e40 	.word	0x08007e40
 8007060:	08007e40 	.word	0x08007e40
 8007064:	08007e44 	.word	0x08007e44

08007068 <__retarget_lock_acquire_recursive>:
 8007068:	4770      	bx	lr

0800706a <__retarget_lock_release_recursive>:
 800706a:	4770      	bx	lr

0800706c <memcpy>:
 800706c:	440a      	add	r2, r1
 800706e:	4291      	cmp	r1, r2
 8007070:	f100 33ff 	add.w	r3, r0, #4294967295
 8007074:	d100      	bne.n	8007078 <memcpy+0xc>
 8007076:	4770      	bx	lr
 8007078:	b510      	push	{r4, lr}
 800707a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007082:	4291      	cmp	r1, r2
 8007084:	d1f9      	bne.n	800707a <memcpy+0xe>
 8007086:	bd10      	pop	{r4, pc}

08007088 <memset>:
 8007088:	4402      	add	r2, r0
 800708a:	4603      	mov	r3, r0
 800708c:	4293      	cmp	r3, r2
 800708e:	d100      	bne.n	8007092 <memset+0xa>
 8007090:	4770      	bx	lr
 8007092:	f803 1b01 	strb.w	r1, [r3], #1
 8007096:	e7f9      	b.n	800708c <memset+0x4>

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0e      	ldr	r6, [pc, #56]	; (80070d4 <sbrk_aligned+0x3c>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 f8f6 	bl	8007294 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f8f1 	bl	8007294 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d00a      	beq.n	80070cc <sbrk_aligned+0x34>
 80070b6:	1cc4      	adds	r4, r0, #3
 80070b8:	f024 0403 	bic.w	r4, r4, #3
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d007      	beq.n	80070d0 <sbrk_aligned+0x38>
 80070c0:	1a21      	subs	r1, r4, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f8e6 	bl	8007294 <_sbrk_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d101      	bne.n	80070d0 <sbrk_aligned+0x38>
 80070cc:	f04f 34ff 	mov.w	r4, #4294967295
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	20004bd0 	.word	0x20004bd0

080070d8 <_malloc_r>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	1ccd      	adds	r5, r1, #3
 80070de:	f025 0503 	bic.w	r5, r5, #3
 80070e2:	3508      	adds	r5, #8
 80070e4:	2d0c      	cmp	r5, #12
 80070e6:	bf38      	it	cc
 80070e8:	250c      	movcc	r5, #12
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	4607      	mov	r7, r0
 80070ee:	db01      	blt.n	80070f4 <_malloc_r+0x1c>
 80070f0:	42a9      	cmp	r1, r5
 80070f2:	d905      	bls.n	8007100 <_malloc_r+0x28>
 80070f4:	230c      	movs	r3, #12
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	2600      	movs	r6, #0
 80070fa:	4630      	mov	r0, r6
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4e2e      	ldr	r6, [pc, #184]	; (80071bc <_malloc_r+0xe4>)
 8007102:	f000 f997 	bl	8007434 <__malloc_lock>
 8007106:	6833      	ldr	r3, [r6, #0]
 8007108:	461c      	mov	r4, r3
 800710a:	bb34      	cbnz	r4, 800715a <_malloc_r+0x82>
 800710c:	4629      	mov	r1, r5
 800710e:	4638      	mov	r0, r7
 8007110:	f7ff ffc2 	bl	8007098 <sbrk_aligned>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	4604      	mov	r4, r0
 8007118:	d14d      	bne.n	80071b6 <_malloc_r+0xde>
 800711a:	6834      	ldr	r4, [r6, #0]
 800711c:	4626      	mov	r6, r4
 800711e:	2e00      	cmp	r6, #0
 8007120:	d140      	bne.n	80071a4 <_malloc_r+0xcc>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	4631      	mov	r1, r6
 8007126:	4638      	mov	r0, r7
 8007128:	eb04 0803 	add.w	r8, r4, r3
 800712c:	f000 f8b2 	bl	8007294 <_sbrk_r>
 8007130:	4580      	cmp	r8, r0
 8007132:	d13a      	bne.n	80071aa <_malloc_r+0xd2>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	3503      	adds	r5, #3
 8007138:	1a6d      	subs	r5, r5, r1
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	4629      	mov	r1, r5
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ffa5 	bl	8007098 <sbrk_aligned>
 800714e:	3001      	adds	r0, #1
 8007150:	d02b      	beq.n	80071aa <_malloc_r+0xd2>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	442b      	add	r3, r5
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	e00e      	b.n	8007178 <_malloc_r+0xa0>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	1b52      	subs	r2, r2, r5
 800715e:	d41e      	bmi.n	800719e <_malloc_r+0xc6>
 8007160:	2a0b      	cmp	r2, #11
 8007162:	d916      	bls.n	8007192 <_malloc_r+0xba>
 8007164:	1961      	adds	r1, r4, r5
 8007166:	42a3      	cmp	r3, r4
 8007168:	6025      	str	r5, [r4, #0]
 800716a:	bf18      	it	ne
 800716c:	6059      	strne	r1, [r3, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	bf08      	it	eq
 8007172:	6031      	streq	r1, [r6, #0]
 8007174:	5162      	str	r2, [r4, r5]
 8007176:	604b      	str	r3, [r1, #4]
 8007178:	4638      	mov	r0, r7
 800717a:	f104 060b 	add.w	r6, r4, #11
 800717e:	f000 f95f 	bl	8007440 <__malloc_unlock>
 8007182:	f026 0607 	bic.w	r6, r6, #7
 8007186:	1d23      	adds	r3, r4, #4
 8007188:	1af2      	subs	r2, r6, r3
 800718a:	d0b6      	beq.n	80070fa <_malloc_r+0x22>
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	50a3      	str	r3, [r4, r2]
 8007190:	e7b3      	b.n	80070fa <_malloc_r+0x22>
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	bf0c      	ite	eq
 8007198:	6032      	streq	r2, [r6, #0]
 800719a:	605a      	strne	r2, [r3, #4]
 800719c:	e7ec      	b.n	8007178 <_malloc_r+0xa0>
 800719e:	4623      	mov	r3, r4
 80071a0:	6864      	ldr	r4, [r4, #4]
 80071a2:	e7b2      	b.n	800710a <_malloc_r+0x32>
 80071a4:	4634      	mov	r4, r6
 80071a6:	6876      	ldr	r6, [r6, #4]
 80071a8:	e7b9      	b.n	800711e <_malloc_r+0x46>
 80071aa:	230c      	movs	r3, #12
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4638      	mov	r0, r7
 80071b0:	f000 f946 	bl	8007440 <__malloc_unlock>
 80071b4:	e7a1      	b.n	80070fa <_malloc_r+0x22>
 80071b6:	6025      	str	r5, [r4, #0]
 80071b8:	e7de      	b.n	8007178 <_malloc_r+0xa0>
 80071ba:	bf00      	nop
 80071bc:	20004bcc 	.word	0x20004bcc

080071c0 <cleanup_glue>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	6809      	ldr	r1, [r1, #0]
 80071c6:	4605      	mov	r5, r0
 80071c8:	b109      	cbz	r1, 80071ce <cleanup_glue+0xe>
 80071ca:	f7ff fff9 	bl	80071c0 <cleanup_glue>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d6:	f000 b939 	b.w	800744c <_free_r>
	...

080071dc <_reclaim_reent>:
 80071dc:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <_reclaim_reent+0xb4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4283      	cmp	r3, r0
 80071e2:	b570      	push	{r4, r5, r6, lr}
 80071e4:	4604      	mov	r4, r0
 80071e6:	d051      	beq.n	800728c <_reclaim_reent+0xb0>
 80071e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80071ea:	b143      	cbz	r3, 80071fe <_reclaim_reent+0x22>
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d14a      	bne.n	8007288 <_reclaim_reent+0xac>
 80071f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	b111      	cbz	r1, 80071fe <_reclaim_reent+0x22>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 f927 	bl	800744c <_free_r>
 80071fe:	6961      	ldr	r1, [r4, #20]
 8007200:	b111      	cbz	r1, 8007208 <_reclaim_reent+0x2c>
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f922 	bl	800744c <_free_r>
 8007208:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800720a:	b111      	cbz	r1, 8007212 <_reclaim_reent+0x36>
 800720c:	4620      	mov	r0, r4
 800720e:	f000 f91d 	bl	800744c <_free_r>
 8007212:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007214:	b111      	cbz	r1, 800721c <_reclaim_reent+0x40>
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f918 	bl	800744c <_free_r>
 800721c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800721e:	b111      	cbz	r1, 8007226 <_reclaim_reent+0x4a>
 8007220:	4620      	mov	r0, r4
 8007222:	f000 f913 	bl	800744c <_free_r>
 8007226:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007228:	b111      	cbz	r1, 8007230 <_reclaim_reent+0x54>
 800722a:	4620      	mov	r0, r4
 800722c:	f000 f90e 	bl	800744c <_free_r>
 8007230:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007232:	b111      	cbz	r1, 800723a <_reclaim_reent+0x5e>
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f909 	bl	800744c <_free_r>
 800723a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800723c:	b111      	cbz	r1, 8007244 <_reclaim_reent+0x68>
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f904 	bl	800744c <_free_r>
 8007244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007246:	b111      	cbz	r1, 800724e <_reclaim_reent+0x72>
 8007248:	4620      	mov	r0, r4
 800724a:	f000 f8ff 	bl	800744c <_free_r>
 800724e:	69a3      	ldr	r3, [r4, #24]
 8007250:	b1e3      	cbz	r3, 800728c <_reclaim_reent+0xb0>
 8007252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007254:	4620      	mov	r0, r4
 8007256:	4798      	blx	r3
 8007258:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800725a:	b1b9      	cbz	r1, 800728c <_reclaim_reent+0xb0>
 800725c:	4620      	mov	r0, r4
 800725e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007262:	f7ff bfad 	b.w	80071c0 <cleanup_glue>
 8007266:	5949      	ldr	r1, [r1, r5]
 8007268:	b941      	cbnz	r1, 800727c <_reclaim_reent+0xa0>
 800726a:	3504      	adds	r5, #4
 800726c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800726e:	2d80      	cmp	r5, #128	; 0x80
 8007270:	68d9      	ldr	r1, [r3, #12]
 8007272:	d1f8      	bne.n	8007266 <_reclaim_reent+0x8a>
 8007274:	4620      	mov	r0, r4
 8007276:	f000 f8e9 	bl	800744c <_free_r>
 800727a:	e7ba      	b.n	80071f2 <_reclaim_reent+0x16>
 800727c:	680e      	ldr	r6, [r1, #0]
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f8e4 	bl	800744c <_free_r>
 8007284:	4631      	mov	r1, r6
 8007286:	e7ef      	b.n	8007268 <_reclaim_reent+0x8c>
 8007288:	2500      	movs	r5, #0
 800728a:	e7ef      	b.n	800726c <_reclaim_reent+0x90>
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	bf00      	nop
 8007290:	20000010 	.word	0x20000010

08007294 <_sbrk_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_sbrk_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7f9 fe5a 	bl	8000f58 <_sbrk>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_sbrk_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_sbrk_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	20004bd4 	.word	0x20004bd4

080072b4 <siprintf>:
 80072b4:	b40e      	push	{r1, r2, r3}
 80072b6:	b500      	push	{lr}
 80072b8:	b09c      	sub	sp, #112	; 0x70
 80072ba:	ab1d      	add	r3, sp, #116	; 0x74
 80072bc:	9002      	str	r0, [sp, #8]
 80072be:	9006      	str	r0, [sp, #24]
 80072c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072c4:	4809      	ldr	r0, [pc, #36]	; (80072ec <siprintf+0x38>)
 80072c6:	9107      	str	r1, [sp, #28]
 80072c8:	9104      	str	r1, [sp, #16]
 80072ca:	4909      	ldr	r1, [pc, #36]	; (80072f0 <siprintf+0x3c>)
 80072cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d0:	9105      	str	r1, [sp, #20]
 80072d2:	6800      	ldr	r0, [r0, #0]
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	a902      	add	r1, sp, #8
 80072d8:	f000 f960 	bl	800759c <_svfiprintf_r>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	b01c      	add	sp, #112	; 0x70
 80072e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e8:	b003      	add	sp, #12
 80072ea:	4770      	bx	lr
 80072ec:	20000010 	.word	0x20000010
 80072f0:	ffff0208 	.word	0xffff0208

080072f4 <strncpy>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	3901      	subs	r1, #1
 80072f8:	4603      	mov	r3, r0
 80072fa:	b132      	cbz	r2, 800730a <strncpy+0x16>
 80072fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007300:	f803 4b01 	strb.w	r4, [r3], #1
 8007304:	3a01      	subs	r2, #1
 8007306:	2c00      	cmp	r4, #0
 8007308:	d1f7      	bne.n	80072fa <strncpy+0x6>
 800730a:	441a      	add	r2, r3
 800730c:	2100      	movs	r1, #0
 800730e:	4293      	cmp	r3, r2
 8007310:	d100      	bne.n	8007314 <strncpy+0x20>
 8007312:	bd10      	pop	{r4, pc}
 8007314:	f803 1b01 	strb.w	r1, [r3], #1
 8007318:	e7f9      	b.n	800730e <strncpy+0x1a>
	...

0800731c <_strtol_l.constprop.0>:
 800731c:	2b01      	cmp	r3, #1
 800731e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007322:	d001      	beq.n	8007328 <_strtol_l.constprop.0+0xc>
 8007324:	2b24      	cmp	r3, #36	; 0x24
 8007326:	d906      	bls.n	8007336 <_strtol_l.constprop.0+0x1a>
 8007328:	f7ff fe74 	bl	8007014 <__errno>
 800732c:	2316      	movs	r3, #22
 800732e:	6003      	str	r3, [r0, #0]
 8007330:	2000      	movs	r0, #0
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800741c <_strtol_l.constprop.0+0x100>
 800733a:	460d      	mov	r5, r1
 800733c:	462e      	mov	r6, r5
 800733e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007342:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007346:	f017 0708 	ands.w	r7, r7, #8
 800734a:	d1f7      	bne.n	800733c <_strtol_l.constprop.0+0x20>
 800734c:	2c2d      	cmp	r4, #45	; 0x2d
 800734e:	d132      	bne.n	80073b6 <_strtol_l.constprop.0+0x9a>
 8007350:	782c      	ldrb	r4, [r5, #0]
 8007352:	2701      	movs	r7, #1
 8007354:	1cb5      	adds	r5, r6, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d05b      	beq.n	8007412 <_strtol_l.constprop.0+0xf6>
 800735a:	2b10      	cmp	r3, #16
 800735c:	d109      	bne.n	8007372 <_strtol_l.constprop.0+0x56>
 800735e:	2c30      	cmp	r4, #48	; 0x30
 8007360:	d107      	bne.n	8007372 <_strtol_l.constprop.0+0x56>
 8007362:	782c      	ldrb	r4, [r5, #0]
 8007364:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007368:	2c58      	cmp	r4, #88	; 0x58
 800736a:	d14d      	bne.n	8007408 <_strtol_l.constprop.0+0xec>
 800736c:	786c      	ldrb	r4, [r5, #1]
 800736e:	2310      	movs	r3, #16
 8007370:	3502      	adds	r5, #2
 8007372:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007376:	f108 38ff 	add.w	r8, r8, #4294967295
 800737a:	f04f 0c00 	mov.w	ip, #0
 800737e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007382:	4666      	mov	r6, ip
 8007384:	fb03 8a19 	mls	sl, r3, r9, r8
 8007388:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800738c:	f1be 0f09 	cmp.w	lr, #9
 8007390:	d816      	bhi.n	80073c0 <_strtol_l.constprop.0+0xa4>
 8007392:	4674      	mov	r4, lr
 8007394:	42a3      	cmp	r3, r4
 8007396:	dd24      	ble.n	80073e2 <_strtol_l.constprop.0+0xc6>
 8007398:	f1bc 0f00 	cmp.w	ip, #0
 800739c:	db1e      	blt.n	80073dc <_strtol_l.constprop.0+0xc0>
 800739e:	45b1      	cmp	r9, r6
 80073a0:	d31c      	bcc.n	80073dc <_strtol_l.constprop.0+0xc0>
 80073a2:	d101      	bne.n	80073a8 <_strtol_l.constprop.0+0x8c>
 80073a4:	45a2      	cmp	sl, r4
 80073a6:	db19      	blt.n	80073dc <_strtol_l.constprop.0+0xc0>
 80073a8:	fb06 4603 	mla	r6, r6, r3, r4
 80073ac:	f04f 0c01 	mov.w	ip, #1
 80073b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073b4:	e7e8      	b.n	8007388 <_strtol_l.constprop.0+0x6c>
 80073b6:	2c2b      	cmp	r4, #43	; 0x2b
 80073b8:	bf04      	itt	eq
 80073ba:	782c      	ldrbeq	r4, [r5, #0]
 80073bc:	1cb5      	addeq	r5, r6, #2
 80073be:	e7ca      	b.n	8007356 <_strtol_l.constprop.0+0x3a>
 80073c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80073c4:	f1be 0f19 	cmp.w	lr, #25
 80073c8:	d801      	bhi.n	80073ce <_strtol_l.constprop.0+0xb2>
 80073ca:	3c37      	subs	r4, #55	; 0x37
 80073cc:	e7e2      	b.n	8007394 <_strtol_l.constprop.0+0x78>
 80073ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80073d2:	f1be 0f19 	cmp.w	lr, #25
 80073d6:	d804      	bhi.n	80073e2 <_strtol_l.constprop.0+0xc6>
 80073d8:	3c57      	subs	r4, #87	; 0x57
 80073da:	e7db      	b.n	8007394 <_strtol_l.constprop.0+0x78>
 80073dc:	f04f 3cff 	mov.w	ip, #4294967295
 80073e0:	e7e6      	b.n	80073b0 <_strtol_l.constprop.0+0x94>
 80073e2:	f1bc 0f00 	cmp.w	ip, #0
 80073e6:	da05      	bge.n	80073f4 <_strtol_l.constprop.0+0xd8>
 80073e8:	2322      	movs	r3, #34	; 0x22
 80073ea:	6003      	str	r3, [r0, #0]
 80073ec:	4646      	mov	r6, r8
 80073ee:	b942      	cbnz	r2, 8007402 <_strtol_l.constprop.0+0xe6>
 80073f0:	4630      	mov	r0, r6
 80073f2:	e79e      	b.n	8007332 <_strtol_l.constprop.0+0x16>
 80073f4:	b107      	cbz	r7, 80073f8 <_strtol_l.constprop.0+0xdc>
 80073f6:	4276      	negs	r6, r6
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	d0f9      	beq.n	80073f0 <_strtol_l.constprop.0+0xd4>
 80073fc:	f1bc 0f00 	cmp.w	ip, #0
 8007400:	d000      	beq.n	8007404 <_strtol_l.constprop.0+0xe8>
 8007402:	1e69      	subs	r1, r5, #1
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	e7f3      	b.n	80073f0 <_strtol_l.constprop.0+0xd4>
 8007408:	2430      	movs	r4, #48	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1b1      	bne.n	8007372 <_strtol_l.constprop.0+0x56>
 800740e:	2308      	movs	r3, #8
 8007410:	e7af      	b.n	8007372 <_strtol_l.constprop.0+0x56>
 8007412:	2c30      	cmp	r4, #48	; 0x30
 8007414:	d0a5      	beq.n	8007362 <_strtol_l.constprop.0+0x46>
 8007416:	230a      	movs	r3, #10
 8007418:	e7ab      	b.n	8007372 <_strtol_l.constprop.0+0x56>
 800741a:	bf00      	nop
 800741c:	08007d05 	.word	0x08007d05

08007420 <strtol>:
 8007420:	4613      	mov	r3, r2
 8007422:	460a      	mov	r2, r1
 8007424:	4601      	mov	r1, r0
 8007426:	4802      	ldr	r0, [pc, #8]	; (8007430 <strtol+0x10>)
 8007428:	6800      	ldr	r0, [r0, #0]
 800742a:	f7ff bf77 	b.w	800731c <_strtol_l.constprop.0>
 800742e:	bf00      	nop
 8007430:	20000010 	.word	0x20000010

08007434 <__malloc_lock>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__malloc_lock+0x8>)
 8007436:	f7ff be17 	b.w	8007068 <__retarget_lock_acquire_recursive>
 800743a:	bf00      	nop
 800743c:	20004bc8 	.word	0x20004bc8

08007440 <__malloc_unlock>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__malloc_unlock+0x8>)
 8007442:	f7ff be12 	b.w	800706a <__retarget_lock_release_recursive>
 8007446:	bf00      	nop
 8007448:	20004bc8 	.word	0x20004bc8

0800744c <_free_r>:
 800744c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800744e:	2900      	cmp	r1, #0
 8007450:	d044      	beq.n	80074dc <_free_r+0x90>
 8007452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007456:	9001      	str	r0, [sp, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f1a1 0404 	sub.w	r4, r1, #4
 800745e:	bfb8      	it	lt
 8007460:	18e4      	addlt	r4, r4, r3
 8007462:	f7ff ffe7 	bl	8007434 <__malloc_lock>
 8007466:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <_free_r+0x94>)
 8007468:	9801      	ldr	r0, [sp, #4]
 800746a:	6813      	ldr	r3, [r2, #0]
 800746c:	b933      	cbnz	r3, 800747c <_free_r+0x30>
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	6014      	str	r4, [r2, #0]
 8007472:	b003      	add	sp, #12
 8007474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007478:	f7ff bfe2 	b.w	8007440 <__malloc_unlock>
 800747c:	42a3      	cmp	r3, r4
 800747e:	d908      	bls.n	8007492 <_free_r+0x46>
 8007480:	6825      	ldr	r5, [r4, #0]
 8007482:	1961      	adds	r1, r4, r5
 8007484:	428b      	cmp	r3, r1
 8007486:	bf01      	itttt	eq
 8007488:	6819      	ldreq	r1, [r3, #0]
 800748a:	685b      	ldreq	r3, [r3, #4]
 800748c:	1949      	addeq	r1, r1, r5
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	e7ed      	b.n	800746e <_free_r+0x22>
 8007492:	461a      	mov	r2, r3
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	b10b      	cbz	r3, 800749c <_free_r+0x50>
 8007498:	42a3      	cmp	r3, r4
 800749a:	d9fa      	bls.n	8007492 <_free_r+0x46>
 800749c:	6811      	ldr	r1, [r2, #0]
 800749e:	1855      	adds	r5, r2, r1
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	d10b      	bne.n	80074bc <_free_r+0x70>
 80074a4:	6824      	ldr	r4, [r4, #0]
 80074a6:	4421      	add	r1, r4
 80074a8:	1854      	adds	r4, r2, r1
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	6011      	str	r1, [r2, #0]
 80074ae:	d1e0      	bne.n	8007472 <_free_r+0x26>
 80074b0:	681c      	ldr	r4, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	6053      	str	r3, [r2, #4]
 80074b6:	4421      	add	r1, r4
 80074b8:	6011      	str	r1, [r2, #0]
 80074ba:	e7da      	b.n	8007472 <_free_r+0x26>
 80074bc:	d902      	bls.n	80074c4 <_free_r+0x78>
 80074be:	230c      	movs	r3, #12
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	e7d6      	b.n	8007472 <_free_r+0x26>
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	1961      	adds	r1, r4, r5
 80074c8:	428b      	cmp	r3, r1
 80074ca:	bf04      	itt	eq
 80074cc:	6819      	ldreq	r1, [r3, #0]
 80074ce:	685b      	ldreq	r3, [r3, #4]
 80074d0:	6063      	str	r3, [r4, #4]
 80074d2:	bf04      	itt	eq
 80074d4:	1949      	addeq	r1, r1, r5
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	6054      	str	r4, [r2, #4]
 80074da:	e7ca      	b.n	8007472 <_free_r+0x26>
 80074dc:	b003      	add	sp, #12
 80074de:	bd30      	pop	{r4, r5, pc}
 80074e0:	20004bcc 	.word	0x20004bcc

080074e4 <__ssputs_r>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	688e      	ldr	r6, [r1, #8]
 80074ea:	429e      	cmp	r6, r3
 80074ec:	4682      	mov	sl, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4690      	mov	r8, r2
 80074f2:	461f      	mov	r7, r3
 80074f4:	d838      	bhi.n	8007568 <__ssputs_r+0x84>
 80074f6:	898a      	ldrh	r2, [r1, #12]
 80074f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074fc:	d032      	beq.n	8007564 <__ssputs_r+0x80>
 80074fe:	6825      	ldr	r5, [r4, #0]
 8007500:	6909      	ldr	r1, [r1, #16]
 8007502:	eba5 0901 	sub.w	r9, r5, r1
 8007506:	6965      	ldr	r5, [r4, #20]
 8007508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800750c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007510:	3301      	adds	r3, #1
 8007512:	444b      	add	r3, r9
 8007514:	106d      	asrs	r5, r5, #1
 8007516:	429d      	cmp	r5, r3
 8007518:	bf38      	it	cc
 800751a:	461d      	movcc	r5, r3
 800751c:	0553      	lsls	r3, r2, #21
 800751e:	d531      	bpl.n	8007584 <__ssputs_r+0xa0>
 8007520:	4629      	mov	r1, r5
 8007522:	f7ff fdd9 	bl	80070d8 <_malloc_r>
 8007526:	4606      	mov	r6, r0
 8007528:	b950      	cbnz	r0, 8007540 <__ssputs_r+0x5c>
 800752a:	230c      	movs	r3, #12
 800752c:	f8ca 3000 	str.w	r3, [sl]
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	6921      	ldr	r1, [r4, #16]
 8007542:	464a      	mov	r2, r9
 8007544:	f7ff fd92 	bl	800706c <memcpy>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800754e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	6126      	str	r6, [r4, #16]
 8007556:	6165      	str	r5, [r4, #20]
 8007558:	444e      	add	r6, r9
 800755a:	eba5 0509 	sub.w	r5, r5, r9
 800755e:	6026      	str	r6, [r4, #0]
 8007560:	60a5      	str	r5, [r4, #8]
 8007562:	463e      	mov	r6, r7
 8007564:	42be      	cmp	r6, r7
 8007566:	d900      	bls.n	800756a <__ssputs_r+0x86>
 8007568:	463e      	mov	r6, r7
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	4632      	mov	r2, r6
 800756e:	4641      	mov	r1, r8
 8007570:	f000 faa8 	bl	8007ac4 <memmove>
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	1b9b      	subs	r3, r3, r6
 8007578:	60a3      	str	r3, [r4, #8]
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4433      	add	r3, r6
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e7db      	b.n	800753c <__ssputs_r+0x58>
 8007584:	462a      	mov	r2, r5
 8007586:	f000 fab7 	bl	8007af8 <_realloc_r>
 800758a:	4606      	mov	r6, r0
 800758c:	2800      	cmp	r0, #0
 800758e:	d1e1      	bne.n	8007554 <__ssputs_r+0x70>
 8007590:	6921      	ldr	r1, [r4, #16]
 8007592:	4650      	mov	r0, sl
 8007594:	f7ff ff5a 	bl	800744c <_free_r>
 8007598:	e7c7      	b.n	800752a <__ssputs_r+0x46>
	...

0800759c <_svfiprintf_r>:
 800759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	4698      	mov	r8, r3
 80075a2:	898b      	ldrh	r3, [r1, #12]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	b09d      	sub	sp, #116	; 0x74
 80075a8:	4607      	mov	r7, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	d50e      	bpl.n	80075ce <_svfiprintf_r+0x32>
 80075b0:	690b      	ldr	r3, [r1, #16]
 80075b2:	b963      	cbnz	r3, 80075ce <_svfiprintf_r+0x32>
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	f7ff fd8f 	bl	80070d8 <_malloc_r>
 80075ba:	6028      	str	r0, [r5, #0]
 80075bc:	6128      	str	r0, [r5, #16]
 80075be:	b920      	cbnz	r0, 80075ca <_svfiprintf_r+0x2e>
 80075c0:	230c      	movs	r3, #12
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e0d1      	b.n	800776e <_svfiprintf_r+0x1d2>
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9309      	str	r3, [sp, #36]	; 0x24
 80075d2:	2320      	movs	r3, #32
 80075d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	2330      	movs	r3, #48	; 0x30
 80075de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007788 <_svfiprintf_r+0x1ec>
 80075e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e6:	f04f 0901 	mov.w	r9, #1
 80075ea:	4623      	mov	r3, r4
 80075ec:	469a      	mov	sl, r3
 80075ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f2:	b10a      	cbz	r2, 80075f8 <_svfiprintf_r+0x5c>
 80075f4:	2a25      	cmp	r2, #37	; 0x25
 80075f6:	d1f9      	bne.n	80075ec <_svfiprintf_r+0x50>
 80075f8:	ebba 0b04 	subs.w	fp, sl, r4
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x7a>
 80075fe:	465b      	mov	r3, fp
 8007600:	4622      	mov	r2, r4
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ff6d 	bl	80074e4 <__ssputs_r>
 800760a:	3001      	adds	r0, #1
 800760c:	f000 80aa 	beq.w	8007764 <_svfiprintf_r+0x1c8>
 8007610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007612:	445a      	add	r2, fp
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80a2 	beq.w	8007764 <_svfiprintf_r+0x1c8>
 8007620:	2300      	movs	r3, #0
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800762a:	f10a 0a01 	add.w	sl, sl, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007636:	931a      	str	r3, [sp, #104]	; 0x68
 8007638:	4654      	mov	r4, sl
 800763a:	2205      	movs	r2, #5
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	4851      	ldr	r0, [pc, #324]	; (8007788 <_svfiprintf_r+0x1ec>)
 8007642:	f7f8 fe05 	bl	8000250 <memchr>
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	b9d8      	cbnz	r0, 8007682 <_svfiprintf_r+0xe6>
 800764a:	06d0      	lsls	r0, r2, #27
 800764c:	bf44      	itt	mi
 800764e:	2320      	movmi	r3, #32
 8007650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007654:	0711      	lsls	r1, r2, #28
 8007656:	bf44      	itt	mi
 8007658:	232b      	movmi	r3, #43	; 0x2b
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765e:	f89a 3000 	ldrb.w	r3, [sl]
 8007662:	2b2a      	cmp	r3, #42	; 0x2a
 8007664:	d015      	beq.n	8007692 <_svfiprintf_r+0xf6>
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	4654      	mov	r4, sl
 800766a:	2000      	movs	r0, #0
 800766c:	f04f 0c0a 	mov.w	ip, #10
 8007670:	4621      	mov	r1, r4
 8007672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007676:	3b30      	subs	r3, #48	; 0x30
 8007678:	2b09      	cmp	r3, #9
 800767a:	d94e      	bls.n	800771a <_svfiprintf_r+0x17e>
 800767c:	b1b0      	cbz	r0, 80076ac <_svfiprintf_r+0x110>
 800767e:	9207      	str	r2, [sp, #28]
 8007680:	e014      	b.n	80076ac <_svfiprintf_r+0x110>
 8007682:	eba0 0308 	sub.w	r3, r0, r8
 8007686:	fa09 f303 	lsl.w	r3, r9, r3
 800768a:	4313      	orrs	r3, r2
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	46a2      	mov	sl, r4
 8007690:	e7d2      	b.n	8007638 <_svfiprintf_r+0x9c>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9103      	str	r1, [sp, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	bfbb      	ittet	lt
 800769e:	425b      	neglt	r3, r3
 80076a0:	f042 0202 	orrlt.w	r2, r2, #2
 80076a4:	9307      	strge	r3, [sp, #28]
 80076a6:	9307      	strlt	r3, [sp, #28]
 80076a8:	bfb8      	it	lt
 80076aa:	9204      	strlt	r2, [sp, #16]
 80076ac:	7823      	ldrb	r3, [r4, #0]
 80076ae:	2b2e      	cmp	r3, #46	; 0x2e
 80076b0:	d10c      	bne.n	80076cc <_svfiprintf_r+0x130>
 80076b2:	7863      	ldrb	r3, [r4, #1]
 80076b4:	2b2a      	cmp	r3, #42	; 0x2a
 80076b6:	d135      	bne.n	8007724 <_svfiprintf_r+0x188>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfb8      	it	lt
 80076c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c8:	3402      	adds	r4, #2
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007798 <_svfiprintf_r+0x1fc>
 80076d0:	7821      	ldrb	r1, [r4, #0]
 80076d2:	2203      	movs	r2, #3
 80076d4:	4650      	mov	r0, sl
 80076d6:	f7f8 fdbb 	bl	8000250 <memchr>
 80076da:	b140      	cbz	r0, 80076ee <_svfiprintf_r+0x152>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	eba0 000a 	sub.w	r0, r0, sl
 80076e2:	fa03 f000 	lsl.w	r0, r3, r0
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	4303      	orrs	r3, r0
 80076ea:	3401      	adds	r4, #1
 80076ec:	9304      	str	r3, [sp, #16]
 80076ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f2:	4826      	ldr	r0, [pc, #152]	; (800778c <_svfiprintf_r+0x1f0>)
 80076f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f8:	2206      	movs	r2, #6
 80076fa:	f7f8 fda9 	bl	8000250 <memchr>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d038      	beq.n	8007774 <_svfiprintf_r+0x1d8>
 8007702:	4b23      	ldr	r3, [pc, #140]	; (8007790 <_svfiprintf_r+0x1f4>)
 8007704:	bb1b      	cbnz	r3, 800774e <_svfiprintf_r+0x1b2>
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	3307      	adds	r3, #7
 800770a:	f023 0307 	bic.w	r3, r3, #7
 800770e:	3308      	adds	r3, #8
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	4433      	add	r3, r6
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	e767      	b.n	80075ea <_svfiprintf_r+0x4e>
 800771a:	fb0c 3202 	mla	r2, ip, r2, r3
 800771e:	460c      	mov	r4, r1
 8007720:	2001      	movs	r0, #1
 8007722:	e7a5      	b.n	8007670 <_svfiprintf_r+0xd4>
 8007724:	2300      	movs	r3, #0
 8007726:	3401      	adds	r4, #1
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	4619      	mov	r1, r3
 800772c:	f04f 0c0a 	mov.w	ip, #10
 8007730:	4620      	mov	r0, r4
 8007732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007736:	3a30      	subs	r2, #48	; 0x30
 8007738:	2a09      	cmp	r2, #9
 800773a:	d903      	bls.n	8007744 <_svfiprintf_r+0x1a8>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0c5      	beq.n	80076cc <_svfiprintf_r+0x130>
 8007740:	9105      	str	r1, [sp, #20]
 8007742:	e7c3      	b.n	80076cc <_svfiprintf_r+0x130>
 8007744:	fb0c 2101 	mla	r1, ip, r1, r2
 8007748:	4604      	mov	r4, r0
 800774a:	2301      	movs	r3, #1
 800774c:	e7f0      	b.n	8007730 <_svfiprintf_r+0x194>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <_svfiprintf_r+0x1f8>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4638      	mov	r0, r7
 800775a:	f3af 8000 	nop.w
 800775e:	1c42      	adds	r2, r0, #1
 8007760:	4606      	mov	r6, r0
 8007762:	d1d6      	bne.n	8007712 <_svfiprintf_r+0x176>
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	065b      	lsls	r3, r3, #25
 8007768:	f53f af2c 	bmi.w	80075c4 <_svfiprintf_r+0x28>
 800776c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800776e:	b01d      	add	sp, #116	; 0x74
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	ab03      	add	r3, sp, #12
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	462a      	mov	r2, r5
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <_svfiprintf_r+0x1f8>)
 800777c:	a904      	add	r1, sp, #16
 800777e:	4638      	mov	r0, r7
 8007780:	f000 f87a 	bl	8007878 <_printf_i>
 8007784:	e7eb      	b.n	800775e <_svfiprintf_r+0x1c2>
 8007786:	bf00      	nop
 8007788:	08007e05 	.word	0x08007e05
 800778c:	08007e0f 	.word	0x08007e0f
 8007790:	00000000 	.word	0x00000000
 8007794:	080074e5 	.word	0x080074e5
 8007798:	08007e0b 	.word	0x08007e0b

0800779c <_printf_common>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	4616      	mov	r6, r2
 80077a2:	4699      	mov	r9, r3
 80077a4:	688a      	ldr	r2, [r1, #8]
 80077a6:	690b      	ldr	r3, [r1, #16]
 80077a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	bfb8      	it	lt
 80077b0:	4613      	movlt	r3, r2
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b8:	4607      	mov	r7, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b10a      	cbz	r2, 80077c2 <_printf_common+0x26>
 80077be:	3301      	adds	r3, #1
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	0699      	lsls	r1, r3, #26
 80077c6:	bf42      	ittt	mi
 80077c8:	6833      	ldrmi	r3, [r6, #0]
 80077ca:	3302      	addmi	r3, #2
 80077cc:	6033      	strmi	r3, [r6, #0]
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	f015 0506 	ands.w	r5, r5, #6
 80077d4:	d106      	bne.n	80077e4 <_printf_common+0x48>
 80077d6:	f104 0a19 	add.w	sl, r4, #25
 80077da:	68e3      	ldr	r3, [r4, #12]
 80077dc:	6832      	ldr	r2, [r6, #0]
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	dc26      	bgt.n	8007832 <_printf_common+0x96>
 80077e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077e8:	1e13      	subs	r3, r2, #0
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	bf18      	it	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	0692      	lsls	r2, r2, #26
 80077f2:	d42b      	bmi.n	800784c <_printf_common+0xb0>
 80077f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f8:	4649      	mov	r1, r9
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d01e      	beq.n	8007840 <_printf_common+0xa4>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	68e5      	ldr	r5, [r4, #12]
 8007806:	6832      	ldr	r2, [r6, #0]
 8007808:	f003 0306 	and.w	r3, r3, #6
 800780c:	2b04      	cmp	r3, #4
 800780e:	bf08      	it	eq
 8007810:	1aad      	subeq	r5, r5, r2
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	6922      	ldr	r2, [r4, #16]
 8007816:	bf0c      	ite	eq
 8007818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800781c:	2500      	movne	r5, #0
 800781e:	4293      	cmp	r3, r2
 8007820:	bfc4      	itt	gt
 8007822:	1a9b      	subgt	r3, r3, r2
 8007824:	18ed      	addgt	r5, r5, r3
 8007826:	2600      	movs	r6, #0
 8007828:	341a      	adds	r4, #26
 800782a:	42b5      	cmp	r5, r6
 800782c:	d11a      	bne.n	8007864 <_printf_common+0xc8>
 800782e:	2000      	movs	r0, #0
 8007830:	e008      	b.n	8007844 <_printf_common+0xa8>
 8007832:	2301      	movs	r3, #1
 8007834:	4652      	mov	r2, sl
 8007836:	4649      	mov	r1, r9
 8007838:	4638      	mov	r0, r7
 800783a:	47c0      	blx	r8
 800783c:	3001      	adds	r0, #1
 800783e:	d103      	bne.n	8007848 <_printf_common+0xac>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007848:	3501      	adds	r5, #1
 800784a:	e7c6      	b.n	80077da <_printf_common+0x3e>
 800784c:	18e1      	adds	r1, r4, r3
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	2030      	movs	r0, #48	; 0x30
 8007852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007856:	4422      	add	r2, r4
 8007858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800785c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007860:	3302      	adds	r3, #2
 8007862:	e7c7      	b.n	80077f4 <_printf_common+0x58>
 8007864:	2301      	movs	r3, #1
 8007866:	4622      	mov	r2, r4
 8007868:	4649      	mov	r1, r9
 800786a:	4638      	mov	r0, r7
 800786c:	47c0      	blx	r8
 800786e:	3001      	adds	r0, #1
 8007870:	d0e6      	beq.n	8007840 <_printf_common+0xa4>
 8007872:	3601      	adds	r6, #1
 8007874:	e7d9      	b.n	800782a <_printf_common+0x8e>
	...

08007878 <_printf_i>:
 8007878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	7e0f      	ldrb	r7, [r1, #24]
 800787e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007880:	2f78      	cmp	r7, #120	; 0x78
 8007882:	4691      	mov	r9, r2
 8007884:	4680      	mov	r8, r0
 8007886:	460c      	mov	r4, r1
 8007888:	469a      	mov	sl, r3
 800788a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800788e:	d807      	bhi.n	80078a0 <_printf_i+0x28>
 8007890:	2f62      	cmp	r7, #98	; 0x62
 8007892:	d80a      	bhi.n	80078aa <_printf_i+0x32>
 8007894:	2f00      	cmp	r7, #0
 8007896:	f000 80d8 	beq.w	8007a4a <_printf_i+0x1d2>
 800789a:	2f58      	cmp	r7, #88	; 0x58
 800789c:	f000 80a3 	beq.w	80079e6 <_printf_i+0x16e>
 80078a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078a8:	e03a      	b.n	8007920 <_printf_i+0xa8>
 80078aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ae:	2b15      	cmp	r3, #21
 80078b0:	d8f6      	bhi.n	80078a0 <_printf_i+0x28>
 80078b2:	a101      	add	r1, pc, #4	; (adr r1, 80078b8 <_printf_i+0x40>)
 80078b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007925 	.word	0x08007925
 80078c0:	080078a1 	.word	0x080078a1
 80078c4:	080078a1 	.word	0x080078a1
 80078c8:	080078a1 	.word	0x080078a1
 80078cc:	080078a1 	.word	0x080078a1
 80078d0:	08007925 	.word	0x08007925
 80078d4:	080078a1 	.word	0x080078a1
 80078d8:	080078a1 	.word	0x080078a1
 80078dc:	080078a1 	.word	0x080078a1
 80078e0:	080078a1 	.word	0x080078a1
 80078e4:	08007a31 	.word	0x08007a31
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007a13 	.word	0x08007a13
 80078f0:	080078a1 	.word	0x080078a1
 80078f4:	080078a1 	.word	0x080078a1
 80078f8:	08007a53 	.word	0x08007a53
 80078fc:	080078a1 	.word	0x080078a1
 8007900:	08007955 	.word	0x08007955
 8007904:	080078a1 	.word	0x080078a1
 8007908:	080078a1 	.word	0x080078a1
 800790c:	08007a1b 	.word	0x08007a1b
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007920:	2301      	movs	r3, #1
 8007922:	e0a3      	b.n	8007a6c <_printf_i+0x1f4>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	6829      	ldr	r1, [r5, #0]
 8007928:	0606      	lsls	r6, r0, #24
 800792a:	f101 0304 	add.w	r3, r1, #4
 800792e:	d50a      	bpl.n	8007946 <_printf_i+0xce>
 8007930:	680e      	ldr	r6, [r1, #0]
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	2e00      	cmp	r6, #0
 8007936:	da03      	bge.n	8007940 <_printf_i+0xc8>
 8007938:	232d      	movs	r3, #45	; 0x2d
 800793a:	4276      	negs	r6, r6
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	485e      	ldr	r0, [pc, #376]	; (8007abc <_printf_i+0x244>)
 8007942:	230a      	movs	r3, #10
 8007944:	e019      	b.n	800797a <_printf_i+0x102>
 8007946:	680e      	ldr	r6, [r1, #0]
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800794e:	bf18      	it	ne
 8007950:	b236      	sxthne	r6, r6
 8007952:	e7ef      	b.n	8007934 <_printf_i+0xbc>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	1d19      	adds	r1, r3, #4
 800795a:	6029      	str	r1, [r5, #0]
 800795c:	0601      	lsls	r1, r0, #24
 800795e:	d501      	bpl.n	8007964 <_printf_i+0xec>
 8007960:	681e      	ldr	r6, [r3, #0]
 8007962:	e002      	b.n	800796a <_printf_i+0xf2>
 8007964:	0646      	lsls	r6, r0, #25
 8007966:	d5fb      	bpl.n	8007960 <_printf_i+0xe8>
 8007968:	881e      	ldrh	r6, [r3, #0]
 800796a:	4854      	ldr	r0, [pc, #336]	; (8007abc <_printf_i+0x244>)
 800796c:	2f6f      	cmp	r7, #111	; 0x6f
 800796e:	bf0c      	ite	eq
 8007970:	2308      	moveq	r3, #8
 8007972:	230a      	movne	r3, #10
 8007974:	2100      	movs	r1, #0
 8007976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800797a:	6865      	ldr	r5, [r4, #4]
 800797c:	60a5      	str	r5, [r4, #8]
 800797e:	2d00      	cmp	r5, #0
 8007980:	bfa2      	ittt	ge
 8007982:	6821      	ldrge	r1, [r4, #0]
 8007984:	f021 0104 	bicge.w	r1, r1, #4
 8007988:	6021      	strge	r1, [r4, #0]
 800798a:	b90e      	cbnz	r6, 8007990 <_printf_i+0x118>
 800798c:	2d00      	cmp	r5, #0
 800798e:	d04d      	beq.n	8007a2c <_printf_i+0x1b4>
 8007990:	4615      	mov	r5, r2
 8007992:	fbb6 f1f3 	udiv	r1, r6, r3
 8007996:	fb03 6711 	mls	r7, r3, r1, r6
 800799a:	5dc7      	ldrb	r7, [r0, r7]
 800799c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079a0:	4637      	mov	r7, r6
 80079a2:	42bb      	cmp	r3, r7
 80079a4:	460e      	mov	r6, r1
 80079a6:	d9f4      	bls.n	8007992 <_printf_i+0x11a>
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d10b      	bne.n	80079c4 <_printf_i+0x14c>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	07de      	lsls	r6, r3, #31
 80079b0:	d508      	bpl.n	80079c4 <_printf_i+0x14c>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	4299      	cmp	r1, r3
 80079b8:	bfde      	ittt	le
 80079ba:	2330      	movle	r3, #48	; 0x30
 80079bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079c4:	1b52      	subs	r2, r2, r5
 80079c6:	6122      	str	r2, [r4, #16]
 80079c8:	f8cd a000 	str.w	sl, [sp]
 80079cc:	464b      	mov	r3, r9
 80079ce:	aa03      	add	r2, sp, #12
 80079d0:	4621      	mov	r1, r4
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7ff fee2 	bl	800779c <_printf_common>
 80079d8:	3001      	adds	r0, #1
 80079da:	d14c      	bne.n	8007a76 <_printf_i+0x1fe>
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	b004      	add	sp, #16
 80079e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e6:	4835      	ldr	r0, [pc, #212]	; (8007abc <_printf_i+0x244>)
 80079e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079ec:	6829      	ldr	r1, [r5, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079f4:	6029      	str	r1, [r5, #0]
 80079f6:	061d      	lsls	r5, r3, #24
 80079f8:	d514      	bpl.n	8007a24 <_printf_i+0x1ac>
 80079fa:	07df      	lsls	r7, r3, #31
 80079fc:	bf44      	itt	mi
 80079fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007a02:	6023      	strmi	r3, [r4, #0]
 8007a04:	b91e      	cbnz	r6, 8007a0e <_printf_i+0x196>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	f023 0320 	bic.w	r3, r3, #32
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	2310      	movs	r3, #16
 8007a10:	e7b0      	b.n	8007974 <_printf_i+0xfc>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	f043 0320 	orr.w	r3, r3, #32
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	2378      	movs	r3, #120	; 0x78
 8007a1c:	4828      	ldr	r0, [pc, #160]	; (8007ac0 <_printf_i+0x248>)
 8007a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a22:	e7e3      	b.n	80079ec <_printf_i+0x174>
 8007a24:	0659      	lsls	r1, r3, #25
 8007a26:	bf48      	it	mi
 8007a28:	b2b6      	uxthmi	r6, r6
 8007a2a:	e7e6      	b.n	80079fa <_printf_i+0x182>
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	e7bb      	b.n	80079a8 <_printf_i+0x130>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	6826      	ldr	r6, [r4, #0]
 8007a34:	6961      	ldr	r1, [r4, #20]
 8007a36:	1d18      	adds	r0, r3, #4
 8007a38:	6028      	str	r0, [r5, #0]
 8007a3a:	0635      	lsls	r5, r6, #24
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	d501      	bpl.n	8007a44 <_printf_i+0x1cc>
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <_printf_i+0x1d2>
 8007a44:	0670      	lsls	r0, r6, #25
 8007a46:	d5fb      	bpl.n	8007a40 <_printf_i+0x1c8>
 8007a48:	8019      	strh	r1, [r3, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	4615      	mov	r5, r2
 8007a50:	e7ba      	b.n	80079c8 <_printf_i+0x150>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	602a      	str	r2, [r5, #0]
 8007a58:	681d      	ldr	r5, [r3, #0]
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7f8 fbf6 	bl	8000250 <memchr>
 8007a64:	b108      	cbz	r0, 8007a6a <_printf_i+0x1f2>
 8007a66:	1b40      	subs	r0, r0, r5
 8007a68:	6060      	str	r0, [r4, #4]
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a74:	e7a8      	b.n	80079c8 <_printf_i+0x150>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	47d0      	blx	sl
 8007a80:	3001      	adds	r0, #1
 8007a82:	d0ab      	beq.n	80079dc <_printf_i+0x164>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	079b      	lsls	r3, r3, #30
 8007a88:	d413      	bmi.n	8007ab2 <_printf_i+0x23a>
 8007a8a:	68e0      	ldr	r0, [r4, #12]
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	4298      	cmp	r0, r3
 8007a90:	bfb8      	it	lt
 8007a92:	4618      	movlt	r0, r3
 8007a94:	e7a4      	b.n	80079e0 <_printf_i+0x168>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	47d0      	blx	sl
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d09b      	beq.n	80079dc <_printf_i+0x164>
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	68e3      	ldr	r3, [r4, #12]
 8007aa8:	9903      	ldr	r1, [sp, #12]
 8007aaa:	1a5b      	subs	r3, r3, r1
 8007aac:	42ab      	cmp	r3, r5
 8007aae:	dcf2      	bgt.n	8007a96 <_printf_i+0x21e>
 8007ab0:	e7eb      	b.n	8007a8a <_printf_i+0x212>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	f104 0619 	add.w	r6, r4, #25
 8007ab8:	e7f5      	b.n	8007aa6 <_printf_i+0x22e>
 8007aba:	bf00      	nop
 8007abc:	08007e16 	.word	0x08007e16
 8007ac0:	08007e27 	.word	0x08007e27

08007ac4 <memmove>:
 8007ac4:	4288      	cmp	r0, r1
 8007ac6:	b510      	push	{r4, lr}
 8007ac8:	eb01 0402 	add.w	r4, r1, r2
 8007acc:	d902      	bls.n	8007ad4 <memmove+0x10>
 8007ace:	4284      	cmp	r4, r0
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	d807      	bhi.n	8007ae4 <memmove+0x20>
 8007ad4:	1e43      	subs	r3, r0, #1
 8007ad6:	42a1      	cmp	r1, r4
 8007ad8:	d008      	beq.n	8007aec <memmove+0x28>
 8007ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ade:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ae2:	e7f8      	b.n	8007ad6 <memmove+0x12>
 8007ae4:	4402      	add	r2, r0
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	428a      	cmp	r2, r1
 8007aea:	d100      	bne.n	8007aee <memmove+0x2a>
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007af2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007af6:	e7f7      	b.n	8007ae8 <memmove+0x24>

08007af8 <_realloc_r>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	4680      	mov	r8, r0
 8007afe:	4614      	mov	r4, r2
 8007b00:	460e      	mov	r6, r1
 8007b02:	b921      	cbnz	r1, 8007b0e <_realloc_r+0x16>
 8007b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4611      	mov	r1, r2
 8007b0a:	f7ff bae5 	b.w	80070d8 <_malloc_r>
 8007b0e:	b92a      	cbnz	r2, 8007b1c <_realloc_r+0x24>
 8007b10:	f7ff fc9c 	bl	800744c <_free_r>
 8007b14:	4625      	mov	r5, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	f000 f81b 	bl	8007b56 <_malloc_usable_size_r>
 8007b20:	4284      	cmp	r4, r0
 8007b22:	4607      	mov	r7, r0
 8007b24:	d802      	bhi.n	8007b2c <_realloc_r+0x34>
 8007b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b2a:	d812      	bhi.n	8007b52 <_realloc_r+0x5a>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7ff fad2 	bl	80070d8 <_malloc_r>
 8007b34:	4605      	mov	r5, r0
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0ed      	beq.n	8007b16 <_realloc_r+0x1e>
 8007b3a:	42bc      	cmp	r4, r7
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4631      	mov	r1, r6
 8007b40:	bf28      	it	cs
 8007b42:	463a      	movcs	r2, r7
 8007b44:	f7ff fa92 	bl	800706c <memcpy>
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7ff fc7e 	bl	800744c <_free_r>
 8007b50:	e7e1      	b.n	8007b16 <_realloc_r+0x1e>
 8007b52:	4635      	mov	r5, r6
 8007b54:	e7df      	b.n	8007b16 <_realloc_r+0x1e>

08007b56 <_malloc_usable_size_r>:
 8007b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5a:	1f18      	subs	r0, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bfbc      	itt	lt
 8007b60:	580b      	ldrlt	r3, [r1, r0]
 8007b62:	18c0      	addlt	r0, r0, r3
 8007b64:	4770      	bx	lr
	...

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
